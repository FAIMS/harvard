/****************************** PERFORMANCE TEST ******************************/
// As per Adela's request: @christian and @brian - for the preformance test:
// we need minimum 10 site, in each 10 trenches, in each of them 100 loci, 100
// strata, 100 diaries, 100 photologs, 1000 FCNs, with each children having at
// least one picture. Ideally Adela want a separate test where would be all this
// + 2 relationships to each locus, 2 relationships to each stratum too see if
// the relationship do really slow down substantially the module. I will provide
// you with images shortly.
//
// Site
//  - Trench
//    - Locus
//      - Photograph Log
//    - Stratum Feature
//      - Photograph Log
//    - Diary
//    - FCN

Tree(String label, Object data) {
  String label = label;
  Object data  = data;
  List   children;

  void addChild(tree) {
    if (super.children == null)
      super.children = new ArrayList();

    super.children.add(tree);
  }

  List getChildren() {
    return children;
  }

  String toString() {
    String s = "\n- " + super.label;
    if (super.children != null)
      for (c : super.children)
        s += c.toString().replace("\n", "\n\t\t");
    return s;
  }

  return this;
}

makeTree() {
  Ph1 = Tree("Photograph Log");
  Ph2 = Tree("Photograph Log");
  Loc = Tree("Locus");
  Str = Tree("Stratum Feature");
  Dia = Tree("Diary");
  fcn = Tree("FCN");
  Tre = Tree("Trench");
  Sit = Tree("Site");

  Loc.addChild(Ph1);
  Str.addChild(Ph2);

  Tre.addChild(Loc);
  Tre.addChild(Str);
  Tre.addChild(Dia);
  Tre.addChild(fcn);

  Sit.addChild(Tre);

  return Sit;
}

showWarning("", makeTree().toString());

void saveEntitiesToPCRel(
    String parentType,
    String childType,
    String parentUuid,
    String childUuid
) {
    String relName = parentType + " - " + childType;
    String pOf     = "Parent Of";
    String cOf     = "Child Of";
    saveEntitiesToHierRel(relName, parentUuid, childUuid, pOf, cOf, "");
}

String randomMenuValue(String ref) {
  List vocabIds = getVocabIdsFromRef(ref);
  int  len      = vocabIds.size();
  if (len <= 0)
    return "";

  Random r   = new Random();
  int    i   = r.nextInt(len);

  return vocabIds.get(i);
}

String getRandomString(int len) {
  char[] chars  = (
      "abcdefghijklmnopqrstuvwxyz" +
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
      "1234567890"
  ).toCharArray();
  Random random = new Random();

  StringBuilder sb = new StringBuilder();
  for (int i = 0; i < len; i++) {
      char c = chars[random.nextInt(chars.length)];
      sb.append(c);
  }

  return sb.toString();
}

String randomInputValue(String ref) {
  int len = 5;
  randomInputValue(ref, len);
}

String randomInputValue(String ref, int len) {
  return getRandomString(len);
}

List getAttribs(String archEntType) {
  List attribs = new ArrayList();
  for (String ref : REF_TO_TYPE.keySet()) {
    String archEntTypeActual = getArchEntType(ref);
    if (!archEntType.equals(archEntTypeActual))
      continue;
    if (!hasData(ref))
      continue;
    if (hasMediaType(ref))
      continue;

    String attribName = getAttributeName(ref);
    String annotation = "";
    String vocab      = "";
    String measure    = "";
    String certainty  = "1.0";

    if (hasMenuType(ref)) vocab   = randomMenuValue (ref);
    else                  measure = randomInputValue(ref);

    EntityAttribute ea = createEntityAttribute(
        attribName,
        annotation,
        vocab,
        measure,
        certainty
    );
    attribs.add(ea);
  }

  return attribs;
}

// CALLBACKS
LocusSaveCallback(String parentUuid, String parentType) {
  onSave(uuid, newRecord) {
    // Relate parentUuid to uuid
    saveEntitiesToPCRel(parentType, "Locus", parentUuid, uuid);

    // Make children
    for (int i = 0; i < 3; i++) {
      cb = PhotographLogSaveCallback(uuid, "Locus");
      saveArchEnt(null, "Photograph Log", (List) null, getAttribs("Photograph Log"), cb);
    }
  }

  return this;
}

StratumFeatureSaveCallback(String parentUuid, String parentType) {
  onSave(uuid, newRecord) {
    // Relate parentUuid to uuid
    saveEntitiesToPCRel(parentType, "Stratum Feature", parentUuid, uuid);

    // Make children
    for (int i = 0; i < 3; i++) {
      cb = PhotographLogSaveCallback(uuid, "Stratum Feature");
      saveArchEnt(null, "Photograph Log", (List) null, getAttribs("Photograph Log"), cb);
    }
  }

  return this;
}

DiarySaveCallback(String parentUuid, String parentType) {
  onSave(uuid, newRecord) {
    // Relate parentUuid to uuid
    saveEntitiesToPCRel(parentType, "Diary", parentUuid, uuid);
  }

  return this;
}

PhotographLogSaveCallback(String parentUuid, String parentType) {
  onSave(uuid, newRecord) {
    // Relate parentUuid to uuid
    saveEntitiesToPCRel(parentType, "Photograph Log", parentUuid, uuid);
  }

  return this;
}

FcnSaveCallback(String parentUuid, String parentType) {
  onSave(uuid, newRecord) {
    // Relate parentUuid to uuid
    saveEntitiesToPCRel(parentType, "FCN", parentUuid, uuid);
  }

  return this;
}

TrenchSaveCallback(String parentUuid, String parentType) {
  onSave(uuid, newRecord) {
    // Relate parentUuid to uuid
    saveEntitiesToPCRel(parentType, "Trench", parentUuid, uuid);

    // Make children
    for (int i = 0; i < 3; i++) {
      cb = LocusSaveCallback(uuid, "Trench");
      saveArchEnt(null, "Locus", (List) null, getAttribs("Locus"), cb);
    }
    for (int i = 0; i < 3; i++) {
      cb = StratumFeatureSaveCallback(uuid, "Trench");
      saveArchEnt(null, "Stratum Feature", (List) null, getAttribs("Stratum Feature"), cb);
    }
    for (int i = 0; i < 3; i++) {
      cb = DiarySaveCallback(uuid, "Trench");
      saveArchEnt(null, "Diary", (List) null, getAttribs("Diary"), cb);
    }
    for (int i = 0; i < 3; i++) {
      cb = FcnSaveCallback(uuid, "Trench");
      saveArchEnt(null, "FCN", (List) null, getAttribs("FCN"), cb);
    }
  }

  return this;
}

SiteSaveCallback() {
  onSave(uuid, newRecord) {
    // Make children
    for (int i = 0; i < 3; i++) {
      cb = TrenchSaveCallback(uuid, "Site");
      saveArchEnt(null, "Trench", (List) null, getAttribs("Trench"), cb);
    }
  }

  return this;
}

SiteMaker() {
  run() {
    for (int i = 0; i < 3; i++) {
      cb = SiteSaveCallback();
      saveArchEnt(null, "Site", (List) null, getAttribs("Site"), cb);
    }
  }

  return this;
}

void makeSites() {
  sm = SiteMaker();
  sm.run();
}

void startPerformanceTest() {
  makeSites();
}

void promptPerformanceTest() {
  SimpleDateFormat fmt = new SimpleDateFormat("yyyy");

  Date now      = new Date();
  Date testTime = fmt.parse("2010");

  boolean isInTestTime = now.before(testTime);

  if (isInTestTime) {
    String head  = "{perf_test_head}";
    String body  = "{perf_test_body}";
    String cbOk  = "startPerformanceTest()";
    String cbBad = "";

    showAlert(head, body, cbOk, cbBad);
  }
}

promptPerformanceTest();
