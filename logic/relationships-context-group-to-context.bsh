/******************************* RELATIONSHIPS ********************************/
/* Context Group to Context relationships.                                    */
/*                                                                            */
/* Uses functions and globals from logic/relationships-shared.bsh             */
/*                                                                            */
/* Modifies onClickContextGroupCreateRelationshipstoThisContextGroup using    */
/* @POSTPROC.                                                                 */
/******************************************************************************/
//////////////// FUNCTIONS AFFECTING "CONTEXT GROUP" TAB GROUP /////////////////
addOnEvent("Context_Group",                                    "show",  "CGinitParentRelationshipGlobals()");
addOnEvent("Context_Group",                                    "show",  "CGpopulateExistingRelationships()");
addOnEvent("Context_Group/Context_Group_Contexts/Load_Related_Context", "click", "loadRelatedEntity()");

addOnEvent("Context_Group/Context_Group_Contexts/Existing_Relationships_to_This_Context_Group", "click", "CGSelectRelationship()");
addOnEvent("Context_Group/Context_Group_Contexts/Delete_Relationship",                    "click", "deleteRelationship()");

void CGinitParentRelationshipGlobals() {
  String refSelectedRelParent = "Context_Group/Context_Group_Contexts/Selected_Relationship";

  selectedChildUuid     = null;
  selectedRelId         = null;
  selectedRelIdentifier = null;

  populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
}

void CGpopulateExistingRelationships(){
  String tabGroup    = "Context_Group";
  String currentUuid = getUuid(tabGroup);
  String refExistingRelationships = "Context_Group/Context_Group_Contexts/Existing_Relationships_to_This_Context_Group";

  String q = getCGChildQuery(currentUuid);

  populateCursorList(refExistingRelationships, q, 25);
  refreshTabgroupCSS(tabGroup);
}

void CGSelectRelationship() {
  String refSelectedRelParent = "Context_Group/Context_Group_Contexts/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];
  selectedChildUuid     = arguments[3];

  populateWebViewHtml(refSelectedRelParent, selectedRelIdentifier);
}

////////////////// FUNCTIONS AFFECTING RELATIONSHIP TAB GROUP //////////////////
addOnEvent("Context_Group_Relationship",                                      "show",  "CGinitRelationshipRelationshipGlobals()");
addOnEvent("Context_Group_Relationship/Relationships/Add_Relationship",       "click", "CGaddRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Delete_Relationship",    "click", "deleteRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Existing_Relationships", "click", "CGselectExistingRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Search",                 "click", "CGpopulateProposedRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Search",                 "click", "CGsearchRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Unrelated_Contexts",     "click", "CGselectUnrelatedEntity()");

void CGinitRelationshipRelationshipGlobals() {
  proposedChildUuid       = null;
  selectedRelId           = null;
  proposedChildIdentifier = null;
  selectedRelIdentifier   = null;

  CGpopulateParentIdentiferRelationships();
  CGpopulateProposedRelationship();
  CGclearSearch();
}

void CGpopulateProposedRelationship() {
  String refProposedRel = "Context_Group_Relationship/Relationships/Proposed_Relationship";

  String identifierFrom;
  String relationship;
  String identifierTo;

  identifierFrom = contextIdentifer; // Defined in logic/shared.bsh
  relationship   = "includes";
  identifierTo   = proposedChildIdentifier;

  if (isNull(identifierFrom)) identifierFrom = WEB_REL_DESC_FILL;
  if (isNull(relationship  )) relationship   = WEB_REL_DESC_FILL;
  if (isNull(identifierTo  )) identifierTo   = WEB_REL_DESC_FILL;

  String webviewHtml = WEB_REL_DESC_FMT;
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierFrom);
  webviewHtml = replaceFirst(webviewHtml, "%s", relationship  );
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierTo  );

  populateWebViewHtml(refProposedRel, webviewHtml);
}

void CGsearchRelationship() {
  String parentTabGroup = "Context_Group";
  String parentUuid     = getUuid(parentTabGroup);

  String tabGroup     = "Context_Group_Relationship";
  String refUnrelated = "Context_Group_Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Context_Group_Relationship/Relationships/Existing_Relationships";
  String refAreaCode  = "Context_Group_Relationship/Relationships/AreaCode";
  String refContextId = "Context_Group_Relationship/Relationships/Context_ID";

  String areaCode   = getFieldValue(refAreaCode);
  String contextId  = getFieldValue(refContextId);
  String parentRole = "includes";
  String unrelatedQ = "";
  String relatedQ   = "";

  if (isNull(areaCode)) {
    msgHead  = "Trench ID required";
    msgBody  = "Searching requires that the Trench ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(contextId)) {
    msgHead  = "Locus ID required";
    msgBody  = "Searching requires that the Locus ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }

  unrelatedQ += " SELECT 'unrelated' || char(0) || uuid || char(0) || response, response";
  unrelatedQ += "   FROM latestNonDeletedArchEntFormattedIdentifiers";
  unrelatedQ += "  WHERE uuid IN (";
  unrelatedQ += "         SELECT uuid";
  unrelatedQ += "           FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid)";
  unrelatedQ += "          WHERE attributename = 'Context AreaCode'";
  unrelatedQ += "            AND measure = '{Context_AreaCode}'";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename = 'Context Context ID'";
  unrelatedQ += "                    AND measure = '{Context_Context_ID}')";
  unrelatedQ += "            AND uuid NOT IN (";
  unrelatedQ += "                 SELECT childuuid";
  unrelatedQ += "                   FROM parentchild";
  unrelatedQ += "                  WHERE parentuuid = '{parentUuid}'";
  unrelatedQ += "                    AND parentparticipatesverb = '{parentRole}')";
  unrelatedQ += "            AND uuid != '{parentUuid}')";
  unrelatedQ += " ORDER BY response";
  unrelatedQ += " LIMIT ? OFFSET ?";
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_AreaCode}",   areaCode  );
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_Context_ID}", contextId );
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentRole}",         parentRole);

  relatedQ += getCGChildQuery(parentUuid);

  populateCursorList(refUnrelated, unrelatedQ, 25);
  populateCursorList(refRelated,   relatedQ,   25);

  proposedChildUuid = null; proposedChildIdentifier = null;
  CGpopulateProposedRelationship();
}

void CGclearSearch() {
  String refUnrelated = "Context_Group_Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Context_Group_Relationship/Relationships/Existing_Relationships";

  String q = "SELECT '' WHERE 0 LIMIT ? OFFSET ?";
  populateCursorList(refUnrelated, q, 25);
  populateCursorList(refRelated,   q, 25);
}

void CGselectUnrelatedEntity() {
  String val = getListItemValue();
  if (isNull(val)) return;
  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("unrelated")) return;

  proposedChildUuid       = arguments[1];
  proposedChildIdentifier = arguments[2];

  CGpopulateProposedRelationship();
}

void CGaddRelationship() {
  String parentTabGroup = "Context_Group";

  String relName    = "Context Group - Context";
  String parentUuid = getUuid(parentTabGroup);
  String childUuid  = proposedChildUuid;
  String parentRole = "includes";
  String childRole  = "is included by";
  String callback   = "CGaddRelationshipSucceeded()";

  if (isNull(parentUuid)) {
    String msgHead = "Logic Error";
    String msgBody = "Something happened which never should.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(childUuid)) {
    showToast("No Context selected");
    return;
  }

  saveEntitiesToHierRel(
      relName,
      parentUuid, childUuid,
      parentRole, childRole,
      callback
  );

  proposedChildUuid       = null;
  proposedChildIdentifier = null;
}

void CGaddRelationshipSucceeded() {
  String refProposedRel = "Context_Group_Relationship/Relationships/Proposed_Relationship";

  populateWebViewHtml(refProposedRel, WEB_REL_BLANK);

  CGsearchRelationship();
}

void CGselectExistingRelationship() {
  String refSelectedRelRel = "Context_Group_Relationship/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];

  populateWebViewHtml(refSelectedRelRel, selectedRelIdentifier);
}

void CGpopulateParentIdentiferRelationships() {
  String lotRef = "Context_Group_Relationship/Relationships/Parent_Identifier";
  setFieldToIdentifier("Context_Group", lotRef);
}

String getCGChildQuery(String parentUuid) {
  // `contextIdentifer` is defined in logic/shared.bsh
  String parentIdentifier = contextIdentifer;
  String relntypename     = "Context Group - Context";

  String relatedQ = "";
  relatedQ += "SELECT 'related' || char(0) || relationshipid || char(0) || '"+parentIdentifier+" ' || parentparticipatesverb ||' '|| response || char(0) || childuuid, '"+parentIdentifier+"'||' '||parentparticipatesverb||' '||response";
  relatedQ += "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) ";
  relatedQ += "  JOIN createdmodifiedatby USING (uuid) ";
  relatedQ += " WHERE relationshipid IN (SELECT relationshipid  ";
  relatedQ += "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  ";
  relatedQ += "                           WHERE relntypename = '"+relntypename+"') ";
  relatedQ += "   and parentuuid = '"+parentUuid+"' ";
  relatedQ += " ORDER BY createdat desc ";
  relatedQ += " LIMIT ? OFFSET ? ";
  return relatedQ;
}
