/************************* DYNAMIC UI - CONTEXT GROUP *************************/
addOnEvent("Context_Group/Gen/Record_Type", "click", "updateFeatureType()");

// Fetch the "Record Type" vocab and populate the `RECORD_TYPE_VOCAB` global.
fetchRecordType() {
  RECORD_TYPE_VOCAB = new HashMap();

  attributeName = "Record Type";

  q  = " SELECT    vocabid, vocabname";
  q += " FROM      vocabulary";
  q += " LEFT JOIN attributekey";
  q += " USING    (attributeid)";
  q += " WHERE     attributename = '%s'";
  q  = replaceFirst(q, "%s", attributeName);

  populateHashMap = new FetchCallback() {
    onFetch(result) {
      for (row : result) {
        vocabId   = row.get(0);
        vocabName = row.get(1);
        RECORD_TYPE_VOCAB.put(vocabId, vocabName);
      }
    }
  };

  fetchAll(q, populateHashMap);
}

// The `fetchRecordType` call is required to set // `RECORD_TYPE_VOCAB` because
// async code in Beanshell/Java is DUMBBBB.
// Also, RECORD_TYPE_VOCAB is a HashMap: vocabId -> vocabName.
RECORD_TYPE_VOCAB = null;
fetchRecordType();

// Prefetch this vocab seeing as it will be dynamically loaded multiple times
// throughout the module's runtime.
FEATURE_TYPE_VOCAB = new ArrayList();
fetchVocab("Feature Type", FEATURE_TYPE_VOCAB);

updateFeatureType() {
  ref       = "Context_Group/Gen/Record_Type";
  vocabId   = getFieldValue(ref);
  vocabName = RECORD_TYPE_VOCAB.get(vocabId);

  if (vocabName == null            ) return;
  if (vocabName.equals("{Stratum}")) hideFeatureType();
  if (vocabName.equals("{Feature}")) showFeatureType();
}

hideFeatureType() {
  uuid           = getUuid("Context_Group");
  refView        = "Context_Group/Gen/Feature_Type";
  attribName     = refToAttribName(refView);

  if (!hasView(refView)) return;

  // Before removing the view, we get the value of the Feature Type field, which
  // is used to determine if Feature Type should be flagged as `deleted`.
  featureTypeVal = getFieldValue(refView);
  removeView(refView);

  if (isNull(featureTypeVal)) return;

  // Flag Feature Type as `deleted`.
  q  = " INSERT INTO aentvalue (UUID, UserID, AttributeID, Deleted)";
  q += " SELECT '{uuid}', {userid}, attributeid, 1";
  q += " FROM  attributekey";
  q += " WHERE attributename = '{attributename}'";
  q  = replaceFirst(q, "{uuid}", uuid);
  q  = replaceFirst(q, "{userid}", userid);
  q  = replaceFirst(q, "{attributename}", attribName);

  fetchOne(q);
}

showFeatureType() {
  refView  = "Context_Group/Gen/Feature_Type";
  refGroup = "Context_Group/Gen/Feature_Type_Group";

  if (hasView(refView)) return;

  label      = refToLabel(refView);
  attribName = refToAttribName(refView);

  // Create view
  viewDef = createViewDef();
  viewDef.createDropDown      ();
  viewDef.setLabel            (label);
  viewDef.setAttributeName    (attribName);
  viewDef.setAttributeType    ("vocab");
  viewDef.setAnnotationEnabled(true);
  viewDef.setCertaintyEnabled (true);
  viewDef.setInfoEnabled      (true);

  createView(refView, viewDef, refGroup);

  // Populate view
  Boolean hasNull = true;
  populateDropDown(refView, FEATURE_TYPE_VOCAB, hasNull);
}

refToLabel(ref) {
  String tabgroup = ref.split("/")[0];
  String tab      = ref.split("/")[1];
  String view     = ref.split("/")[2];
  String label    = view.replaceAll("_", " ");

  return label;
}

refToAttribName(ref) {
  return refToLabel(ref);
}

// Overrides autogenerated definition
loadContextGroupFrom(String uuid) {
  String tabgroup = "Context_Group";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback updateUi = new FetchCallback() {
    onFetch(result) {
      updateFeatureType();
    }
  };

  showFeatureType();
  showTabGroup(tabgroup, uuid, updateUi);
}
