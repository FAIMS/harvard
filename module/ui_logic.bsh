import android.util.Log;

// Beanshell won't let me write "\0".
final String SEP = Character.toString ((char) 0);

Object dialog;          // Used to help coordinate the display of a "busy..." dialog
String parentTabgroup;  // Used to allow entities to be saved as children
String parentTabgroup__;// Used to allow entities to be saved as children
String redirectTab;     // makes newTab work as expected
String username = "";
String userid   = "";

setFileSyncEnabled(true);
setSyncDelay(5.0f);
setSyncEnabled(true);
setSyncMaxInterval(600.0f);
setSyncMinInterval(5.0f);

/******************************** STRING UTILS ********************************/
String replaceFirst(String haystack, String needle, String replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}

String replaceFirst(String haystack, String replacement) {
  return replaceFirst(haystack, "%s", replacement);
}

String translate(String s, Map m) {
  String out = "";

  for (char c : s) {
    String translation = m.get(c);

    if (isNull(translation)) out += c;
    else                     out += translation;
  }

  return out;
}

String escape(String s) {
  Map dict = new HashMap();
  dict.put('\"', "\\\"");
  dict.put('\\', "\\\\");
  dict.put('\b', "\\b" );
  dict.put('\f', "\\f" );
  dict.put('\n', "\\n" );
  dict.put('\r', "\\r" );

  return translate(s, dict);
}

String args2str(Object[] args) {
  String str = "";
  String sep = ", ";

  for (Object o : args) {
    if (o instanceof String) str += "\"" + escape(o) + "\"" + sep;
    else                     str +=               o         + sep;
  }

  // The loop adds a superfluous trailing separator. This removes it.
  str = str.substring(0, str.length() - sep.length());

  return str;
}

// "Function to string". Makes it very slightly less painful to write callback
// functions as strings.
String fun2str(String funName, Object[] args) {
  String argsStr = args2str(args);

  String str = "{funName}({argsStr})";
  str = replaceFirst(str, "{funName}", funName);
  str = replaceFirst(str, "{argsStr}", argsStr);

  return str;
}

String fun2str(String funName, Object args) {
  return fun2str(funName, new Object[]{args});
}

/******************************************************************************/
/*                           DOCUMENT OBJECT MODEL                            */
/******************************************************************************/
String PREVIOUSLY_DISPLAYED_TAB_GROUP = "";
String CURRENTLY_DISPLAYED_TAB_GROUP  = "";

List getTabGroups() {
  List tabGroups = new ArrayList();
  tabGroups.add("User");
  tabGroups.add("Control");
  tabGroups.add("Site");
  tabGroups.add("Trench");
  tabGroups.add("Date_Closed");
  tabGroups.add("Trench_Files");
  tabGroups.add("Context");
  tabGroups.add("Context_Group");
  tabGroups.add("Matrix");
  tabGroups.add("Photograph_Log");
  tabGroups.add("Diary");
  tabGroups.add("Relationship");
  tabGroups.add("Context_Group_Relationship");
  tabGroups.add("FCN");
  tabGroups.add("Soil_Munsel_Color");
  tabGroups.add("Legacy");
  return tabGroups;
}

void updateDisplayedTabGroup(String tabGroup) {
  PREVIOUSLY_DISPLAYED_TAB_GROUP = CURRENTLY_DISPLAYED_TAB_GROUP;
  CURRENTLY_DISPLAYED_TAB_GROUP  = tabGroup;
}

String getPreviousTabGroup() {
  return getPreviouslyDisplayedTabGroup();
}

String getPreviouslyDisplayedTabGroup() {
  return PREVIOUSLY_DISPLAYED_TAB_GROUP;
}

String getDisplayedTabGroup() {
  return CURRENTLY_DISPLAYED_TAB_GROUP;
}

boolean isDisplayed(String ref) {
  return getDisplayedTabGroup().equals(ref);
}

String getTabGroupRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabGroupRef(fullRef, lastPartOnly);
}

String getTabGroupRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 1) return null;
  return parts[0];
}

String getTabRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabRef(fullRef, lastPartOnly);
}

String getTabRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 2) return null;
  if (lastPartOnly) return                  parts[1];
  else              return parts[0] + "/" + parts[1];
}

String getLastRefPart(String fullRef) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");
  return parts[parts.length-1];
}

String getGuiElementRef(String fullRef) {
  Boolean lastPartOnly = true;
  return getGuiElementRef(fullRef, lastPartOnly);
}

String getGuiElementRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 3) return null;
  if (lastPartOnly) return parts[2];
  else              return fullRef;
}

String getArch16nKey(String ref) {
  String lastRefPart = getLastRefPart(ref);

  if (isNull(lastRefPart)) return null;
  else                     return "{" + lastRefPart + "}";
}

String guessArch16nVal(String ref) {
  String arch16nKey = getArch16nKey(ref);

  if (isNull(arch16nKey)) return "";
  arch16nKey = arch16nKey.replaceAll("_", " ");
  arch16nKey = arch16nKey.replaceAll("^\\{", "");
  arch16nKey = arch16nKey.replaceAll("\\}$", "");
  return arch16nKey;
}

String getAttributeName(String ref) {
  String guiElementRef = getGuiElementRef(ref);
  if (isNull(guiElementRef)) {
    return null;
  }

  String attributeName = guiElementRef.replaceAll("_", " ");
  return attributeName;
}

String getArchEntType(String ref) {
  String tabGroupRef = getTabGroupRef(ref);
  if (isNull(tabGroupRef)) {
    return null;
  }

  String archEntType = tabGroupRef.replaceAll("_", " ");
  return archEntType;
}

String getArchEntTypePascalCased(String ref) {
  String archEntType = getArchEntType(ref);
  if (archEntType == null) {
    return archEntType;
  }

  return archEntType.replaceAll(" ", "");
}

/******************************************************************************/
/*                            BINDING ACCUMULATOR                             */
/*                                                                            */
/* The binding accumulator allows onEvent bindings for the same element to    */
/* accumulate over multiple onEvent calls instead of having later calls       */
/* override earlier ones.                                                     */
/*                                                                            */
/* It also adds support for a several additional events:                      */
/*   - "blur" --- This is merely an interface to make code for adding "blur"  */
/*         events more consistent.                                            */
/*   - "copy" --- Triggered as a record is duplicated, immediately before it  */
/*         is first saved.                                                    */
/*   - "create" --- Triggered after a record is first created.                */
/*   - "delete" --- Triggered after a record is deleted.                      */
/*   - "prefetch" --- Triggered before the "fetch" event. More specifically,  */
/*         this event is triggered before a tab group is fetched and          */
/*         displayed.                                                         */
/*   - "fetch" --- Triggered after a record is fetched and displayed in a     */
/*         given tab group.                                                   */
/*   - "focus" --- This is merely an interface to make code for adding        */
/*         "focus" events more consistent.                                    */
/*   - "leave" --- Triggered after a given tab group is navigated away        */
/*         from. Note that this event cannot be triggered when the FAIMS app  */
/*         is exited.                                                         */
/*   - "save" --- Triggered each time a tab group is saved. This includes the */
/*         first time the tab group is saved as well as subsequent            */
/*         onSave(String, Boolean) calls.                                     */
/*                                                                            */
/* A single call to `bindOnEvents` must occur after all the `addOnEvent` and  */
/* `delOnEvents` calls. Calling `bindOnEvents` is what actually establishes   */
/* the bindings once they have been added to the accumulator.                 */
/******************************************************************************/
Map    EVENTS        = new HashMap(); // (ref, event type) -> callback statement
Set    CUSTOM_EVENTS = new HashSet(); // Events not handled by `onEvent`
CUSTOM_EVENTS.add("blur");
CUSTOM_EVENTS.add("copy");
CUSTOM_EVENTS.add("create");
CUSTOM_EVENTS.add("delete");
CUSTOM_EVENTS.add("fetch");
CUSTOM_EVENTS.add("focus");
CUSTOM_EVENTS.add("leave");
CUSTOM_EVENTS.add("prefetch");
CUSTOM_EVENTS.add("save");

String getKey(String ref, String event) {
  return ref + SEP + event;
}

/* Returns the set of statements bound to an element at `ref` and occuring on
 * `event`.
 */
ArrayList getStatements(String ref, String event) {
  String    key = getKey(ref, event);
  ArrayList val = (ArrayList) EVENTS.get(key);

  if (val == null) return new ArrayList();
  else             return val;
}

void addStatement(String ref, String event, String statement) {
  // In the case that a statement already exists for a given (`ref`, `event`)
  // pair, writing `val.add(statement);` will be enough to add the extra
  // statement. This is because `getStatements` returns a reference to a list.
  // In the case just described, the list is stored in the `EVENTS` map.
  // However, sometimes `getStatements` returns empty lists which are not stored
  // in that map. In this case, calling `EVENTS.put` is required.

  String    key = getKey(ref, event);
  ArrayList val = getStatements(ref, event);
  val.add(statement);
  EVENTS.put(key, val);
}

String getStatementsString(String ref, String event) {
  ArrayList stmts = getStatements(ref, event);
  String stmtsStr = "";
  for (String s : stmts) {
    stmtsStr += s;
    stmtsStr += "; ";
  }
  return stmtsStr;
}

boolean hasOnEvent(String ref, String event, String statement) {
  return getStatements(ref, event).contains(statement);
}

void delOnEvent(String ref, String event, String statement) {
  while(getStatements(ref, event).remove(statement));
}

void addOnEvent(String ref, String event, String statement) {
  // Calling `delOnEvent()` first ensures statement occurs once in the list, at
  // the end.
  delOnEvent  (ref, event, statement);
  addStatement(ref, event, statement);
}

void bindOnEvent(String ref, String event) {
  String stmtsStr     = getStatementsString(ref, event);
  String focusStmtStr = getStatementsString(ref, "focus");
  String blurStmtStr  = getStatementsString(ref, "blur" );

  if (!CUSTOM_EVENTS.contains(event)) {
    onEvent(ref, event, stmtsStr);
  } else if (event.equals("focus")) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (event.equals("blur" )) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else {
    ; // Other events are implemented using auto-generated callback functions
  }
}

void bindOnEvents() {
  for (String key : EVENTS.keySet()) {
    refevent = key.split(SEP);
    ref   = refevent[0];
    event = refevent[1];
    bindOnEvent(ref, event);
  }
}

void onLeaveTabGroup() {
  onLeaveTabGroup(getPreviouslyDisplayedTabGroup());
}

/* Execute the "leave" event for the tab group at `ref` if a callback for it
 * exists.
 */
void onLeaveTabGroup(String ref) {
  String event    = "leave";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

/* Establishes `onEvent` bindings necessary to make the "leave" event work. The
 * "leave" event is really triggered upon "show" of another tab.
 */
for (tg : getTabGroups()) {
  String ref      = tg;
  String event    = "show";
  String callback;

  // Update (previously) displayed tab group
  callback = fun2str("updateDisplayedTabGroup", ref);
  addOnEvent(ref, event, callback);

  // Trigger on leave tab group event
  callback = "onLeaveTabGroup()";
  addOnEvent(ref, event, callback);
}

/******************************* LOCALSETTINGS ********************************/
void makeLocalID(){
  fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
  fetchOne("DROP VIEW IF EXISTS parentchild;", null);
  fetchOne("CREATE VIEW parentchild AS "+
           "SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename "+
           "  FROM (SELECT uuid, participatesverb, aenttypename, relationshipid"+
           "          FROM latestnondeletedaentreln "+
           "          JOIN relationship USING (relationshipid) "+
           "          JOIN latestnondeletedarchent USING (uuid) "+
           "          JOIN aenttype USING (aenttypeid)) parent "+
           "  JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename "+
           "          FROM latestnondeletedaentreln "+
           "          JOIN relationship USING (relationshipid) "+
           "          JOIN latestnondeletedarchent USING (uuid) "+
           "          JOIN aenttype USING (aenttypeid)) child "+
           "    ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid);", null);
}
makeLocalID();

void insertIntoLocalSettings(String ref) {
  String val = getFieldValue(ref);
  insertIntoLocalSettings(ref, val);
}

void insertIntoLocalSettings(String key, String val) {
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('" + key + "', '" + val + "');");
}

void insertIntoLocalSettings(String key, Integer val) {
  insertIntoLocalSettings(key, Integer.toString(val));
}

void insertIntoLocalSettingsOnChange(String ref) {
  String val = getFieldValue(ref);

  String insertCallback = fun2str("insertIntoLocalSettings", ref);

  addOnEvent(ref, "blur",  insertCallback);
  addOnEvent(ref, "click", insertCallback);
}

void setFieldValueFromLocalSettings(String key, String ref, boolean doOverwrite) {
  String val = getFieldValue(ref);
  if (!isNull(val) && !doOverwrite) {
    return;
  }

  String q = "SELECT value FROM localSettings WHERE key = '" + key + "';";
  fetchOne(q, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue(ref, result.get(0));
      }
    }
  });
}

void setFieldValueFromLocalSettings(String key, String ref) {
  boolean doOverwrite = false;
  setFieldValueFromLocalSettings(key, ref);
}

void setFieldValueFromLocalSettings(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite);
}

void setFieldValueFromLocalSettings(String ref) {
  setFieldValueFromLocalSettings(ref, false);
}

void setFieldValueFromLocalSettingsOnShow(String ref, boolean doOverwrite) {
  String cb = fun2str(
      "setFieldValueFromLocalSettings",
      new Object[]{ref, doOverwrite}
  );

  addOnEvent(ref, "show", cb);
}

void setFieldValueFromLocalSettingsOnShow(String ref) {
  boolean doOverwrite = false;
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite);
}

/* Causes the value of the field given by `ref` to be saved each time it is
 * modified (on blur). The value of the field is restored when the tab group
 * containing the field is displayed.
 *
 * This function depends on `addOnEvent`. Therefore this function must be called
 * after `addOnEvent` is defined, but before `bindOnEvents` is called. This will
 * be so if the call is made in the autogenerator's `logic` tags.
 */
void persistOverSessions(String ref) {
  setFieldValueFromLocalSettingsOnShow(ref);
  insertIntoLocalSettingsOnChange     (ref);
}

persistOverSessions("User/User_List/Device_Code");
persistOverSessions("Control/Contexts/New_Site_Name");
persistOverSessions("Control/Contexts/Year_of_Campaign");

/*************************** FIELD COPYING HELPERS ****************************/
/* Provides an easy way to copy field values, even between vocabs.            */
/******************************************************************************/
boolean setMenuValue(String ref, String vocabName) {
  String attrName = getAttributeName(ref);
  String vocabId = getVocabId(attrName, vocabName);

  if (isNull(vocabId))
    return false;
  else {
    setFieldValue(ref, vocabId);
    return true;
  }
}

void copyFieldValue(String src, String dst) {
  Boolean doFindVocabId = true;
  copyFieldValue(src, dst, doFindVocabId);
}

/* `src`           The ref of the source field.
 * `dst`           The ref of the destination field.
 * `doFindVocabId` If this is true, and the properties/attributes of `src` and
 *                 `dst` are different, `copyFieldValue` treats `src` and `dst`
 *                 as if they were menus. Therefore, to copy the value seen by
 *                 the user (i.e. the vocabName of `src`), a database query is
 *                 performed. The query determines the which vocabId of `dst`
 *                 will make it display the same vocabName as `src`.
 *
 *                 If `doFindVocabId` is false, the value returned by
 *                 `getFieldValue` is copied, without any database accesses.
 */
void copyFieldValue(String src, String dst, Boolean doFindVocabId) {
  String vocabIdSrc   = getFieldValue(src);
  String vocabNameSrc = getFieldValue(src, true);

  String attrNameSrc = getAttributeName(src);
  String attrNameDst = getAttributeName(dst);

  if (attrNameSrc.equals(attrNameDst) || !doFindVocabId) {
    setFieldValue(dst, vocabIdSrc);
    return;
  }

  if (!setMenuValue(dst, vocabNameSrc)) {
    // Fall back to dumb field copying
    copyFieldValue(src, dst, false);
  }
}

boolean isSelected(String ref, String vocabName) {
  String vocabNameActual = getMenuValue(ref);

  if (vocabNameActual == null)
    return vocabNameActual == vocabName;
  else
    return vocabNameActual.equals(vocabName);
}

void inheritFieldValue(
    String src,
    String dst,
    boolean doCheckParent,
    boolean doFindVocabId
) {
  String fun = "";
  fun += "if (!{check} || getDisplayedTabGroup().equals(\"{parent}\"))";
  fun += "  copyFieldValue(\"{src}\", \"{dst}\", {find})";

  fun = replaceFirst(fun, "{check}",  doCheckParent + "");
  fun = replaceFirst(fun, "{parent}", getTabGroupRef(src));
  fun = replaceFirst(fun, "{src}",    src);
  fun = replaceFirst(fun, "{dst}",    dst);
  fun = replaceFirst(fun, "{find}",   doFindVocabId + "");

  addOnEvent(getTabGroupRef(dst), "create", fun);
}

/* If `doCheckParent`, then the value at `src` will only be inherited to `dst`
 * if `getTabGroupRef(src)` was the previously displayed tab group.
 */
void inheritFieldValue(String src, String dst, boolean doCheckParent) {
  inheritFieldValue(src, dst, doCheckParent, false);
}

void inheritFieldValue(String src, String dst) {
  inheritFieldValue(src, dst, true);
}

inheritFieldValue("Control/Contexts/New_Site_Name", "Site/Site/Site_Site_Name", true);
inheritFieldValue("Control/Contexts/Year_of_Campaign", "Site/Site/Site_Year_of_Campaign", true);
inheritFieldValue("Site/Site/Site_Site_Name", "Trench/Trench/Trench_Site_Name", true);
inheritFieldValue("Site/Site/Trench_ID", "Trench/Trench/Trench_AreaCode", true);
inheritFieldValue("Site/Site/Site_Year_of_Campaign", "Trench/Vars/Trench_Year_of_Campaign", true);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "Trench_Files/Add_Trench_Files/Trench_Files_Site_Name", true);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "Trench_Files/Add_Trench_Files/Trench_Files_Year_of_Campaign", true);
inheritFieldValue("Trench/Trench/Trench_AreaCode", "Trench_Files/Add_Trench_Files/Trench_Files_AreaCode", true);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "Context/General/Context_Site_Name", true);
inheritFieldValue("Trench/Trench/Trench_AreaCode", "Context/General/Context_AreaCode", true);
inheritFieldValue("Trench/Trench/Team_Members", "Context/General/Team_Members", true);
inheritFieldValue("User/User_List/Device_Code", "Context/Vars/Device_Code", true);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "Context/Vars/Context_Year_of_Campaign", true);
inheritFieldValue("Trench/Trench/Trench_AreaCode", "Context_Group/Gen/Context_Group_AreaCode", true);
inheritFieldValue("User/User_List/Device_Code", "Context_Group/Vars/Device_Code", true);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "Context_Group/Vars/Context_Group_Site_Name", true);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "Context_Group/Vars/Context_Group_Year_of_Campaign", true);
inheritFieldValue("Context/General/Context_Context_ID", "Matrix/Vars/Context_ID", true);
inheritFieldValue("Context/General/Context_AreaCode", "Matrix/Vars/AreaCode", true);
inheritFieldValue("Context/General/Context_Context_ID", "Photograph_Log/Photograph_Log/Photo_Context_ID", true);
inheritFieldValue("Context_Group/Gen/Context_Group_ID", "Photograph_Log/Photograph_Log/Photo_Context_Group_ID", true);
inheritFieldValue("Context/General/Context_AreaCode", "Photograph_Log/Vars/AreaCode", true);
inheritFieldValue("Context_Group/Gen/Context_Group_AreaCode", "Photograph_Log/Vars/AreaCode", true);
inheritFieldValue("User/User_List/Device_Code", "Photograph_Log/Vars/Device_Code", true);
inheritFieldValue("Context/General/Context_Site_Name", "FCN/General/FCN_Site_Name", true);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "FCN/General/FCN_Site_Name", true);
inheritFieldValue("Context/General/Context_AreaCode", "FCN/General/FCN_AreaCode", true);
inheritFieldValue("Trench/Trench/Trench_AreaCode", "FCN/General/FCN_AreaCode", true);
inheritFieldValue("Context/General/Context_Context_ID", "FCN/General/Context_ID", true);
inheritFieldValue("Context/Vars/Context_Year_of_Campaign", "FCN/Vars/FCN_Year_of_Campaign", true);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "FCN/Vars/FCN_Year_of_Campaign", true);
inheritFieldValue("Context/General/Context_Context_ID", "Soil_Munsel_Color/Vars/Soil_Munsel_Color_Locus_ID", true);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "Legacy/Legacy/Legacy_Site_Name", true);

/**************************** NEW TAB REDIRECTION *****************************/
/* Causes a call to `newTab("tab/path")` to take the user to the specified    */
/* tab.                                                                       */
/******************************************************************************/

void newTab(String tab, Boolean resolveTabGroups) {
  if (!resolveTabGroups) {
    return newTab(tab);
  }

  String tabGroupRef = getTabGroupRef(tab);
  String tabRef      = getTabRef     (tab);

  if (!isDisplayed(tabGroupRef)) newTabGroup(tabGroupRef);
  if (!isNull     (tabRef     )) newTab     (tabRef);
}

/******************************************************************************/
/*                           DROPDOWN VALUE GETTER                            */
/*                                                                            */
/* For consistency with `getListItemValue()`.                                 */
/******************************************************************************/
String DROPDOWN_ITEM_VALUE = null;

String getDropdownItemValue() {
  return DROPDOWN_ITEM_VALUE;
}

addOnEvent("User/User_List/Users", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"User/User_List/Users\")");
addOnEvent("User/User_List/Device_Code", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"User/User_List/Device_Code\")");
addOnEvent("Control/Search/Entity_Types", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Control/Search/Entity_Types\")");
addOnEvent("Trench/Trench/Trench_Dimensions", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Trench/Trench/Trench_Dimensions\")");
addOnEvent("Trench/Trench/Attached_Trench_Files", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Trench/Trench/Attached_Trench_Files\")");
addOnEvent("Trench_Files/Add_Trench_Files/File_Type", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Trench_Files/Add_Trench_Files/File_Type\")");
addOnEvent("Context/General/Horizon_Boundary", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/General/Horizon_Boundary\")");
addOnEvent("Context/General/Contamination", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/General/Contamination\")");
addOnEvent("Context/Cut/Cut_Your_Interpretation", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Cut/Cut_Your_Interpretation\")");
addOnEvent("Context/Cut/Shape_of_Cut", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Cut/Shape_of_Cut\")");
addOnEvent("Context/Cut/Sides_of_Cut", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Cut/Sides_of_Cut\")");
addOnEvent("Context/Cut/Shape_of_Base", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Cut/Shape_of_Base\")");
addOnEvent("Context/Cut/Orientation", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Cut/Orientation\")");
addOnEvent("Context/Cut/Inclination_of_axis", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Cut/Inclination_of_axis\")");
addOnEvent("Context/Deposit/Deposit_Your_Interpretation", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Deposit/Deposit_Your_Interpretation\")");
addOnEvent("Context/Deposit/Soil_Compaction_Type", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Deposit/Soil_Compaction_Type\")");
addOnEvent("Context/Deposit/Soil_Texture", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Deposit/Soil_Texture\")");
addOnEvent("Context/Deposit/Munsel_Colors", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Deposit/Munsel_Colors\")");
addOnEvent("Context/Deposit/Composition_Type", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Deposit/Composition_Type\")");
addOnEvent("Context/Deposit/Deposit_Bedding", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Deposit/Deposit_Bedding\")");
addOnEvent("Context/Deposit/Associated_Matrices", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Deposit/Associated_Matrices\")");
addOnEvent("Context/Add/Select_a_Photograph_Log", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Add/Select_a_Photograph_Log\")");
addOnEvent("Context/Soil_Texture_Helper/Soil_Texture_Helper", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Soil_Texture_Helper/Soil_Texture_Helper\")");
addOnEvent("Context/Vars/Device_Code", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context/Vars/Device_Code\")");
addOnEvent("Context_Group/Add/Select_a_Photograph_Log", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context_Group/Add/Select_a_Photograph_Log\")");
addOnEvent("Context_Group/Vars/Device_Code", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Context_Group/Vars/Device_Code\")");
addOnEvent("Matrix/Matrix/Component", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Matrix/Matrix/Component\")");
addOnEvent("Photograph_Log/Photograph_Log/Scene_Type", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Photograph_Log/Photograph_Log/Scene_Type\")");
addOnEvent("Photograph_Log/Vars/Device_Code", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Photograph_Log/Vars/Device_Code\")");
addOnEvent("Relationship/Relationships/Relationship_Type", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Relationship/Relationships/Relationship_Type\")");
addOnEvent("FCN/General/Collection_Method", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"FCN/General/Collection_Method\")");
addOnEvent("FCN/General/FCN_Class", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"FCN/General/FCN_Class\")");
addOnEvent("Soil_Munsel_Color/Add_Soil_Munsel_Color/Soil_Munsel_Color", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Soil_Munsel_Color/Add_Soil_Munsel_Color/Soil_Munsel_Color\")");

/******************************************************************************/
/*                             MENU VALUE GETTER                              */
/*                                                                            */
/* Provides simple ways of getting a menu's vocabname as opposed to the       */
/* default, which is the vocabid.                                             */
/******************************************************************************/
// Map from vocabid to vocabname. Populated by `fetchMenuValues()`.
Map VOCABID_TO_VOCABNAME = null;
Map VOCABNAME_TO_VOCABID = null;


void setVocabId(String attrName, String vocabName, String vocabId) {
  String key = attrName + SEP + vocabName;
  String val = vocabId;

  VOCABNAME_TO_VOCABID.put(key, val);
}

String getVocabId(String attrName, String vocabName) {
  return VOCABNAME_TO_VOCABID.get(attrName + SEP + vocabName);
}

/*
 * Initialises `VOCABID_TO_VOCABNAME` with the (vocabid -> vocabname) mapping of
 * every menu.
 */
void fetchMenuValues() {
  VOCABID_TO_VOCABNAME = new HashMap();
  VOCABNAME_TO_VOCABID = new HashMap();

  String q = "";
  q += "    SELECT vocabid, vocabname, attributename";
  q += "      FROM vocabulary";
  q += " LEFT JOIN attributekey";
  q += "     USING (attributeid)";

  FetchCallback populateHashMap = new FetchCallback() {
    onFetch(result) {
      // Populate VOCABID_TO_VOCABNAME
      for (row : result) {
        String vocabId   = row.get(0);
        String vocabName = row.get(1);
        VOCABID_TO_VOCABNAME.put(vocabId, vocabName);
      }

      // Populate VOCABNAME_TO_VOCABID
      for (row : result) {
        String vocabId   = row.get(0);
        String vocabName = row.get(1);
        String attrName  = row.get(2);


        setVocabId(attrName, vocabName, vocabId);
      }
    }
  };

  fetchAll(q, populateHashMap);
}

fetchMenuValues();

/* Returns a menu's vocabname, instead of the (counter-intuitive) vocabid.
 */
String getFieldValue(String ref, Boolean doConvertVocabIds) {
  if (!doConvertVocabIds) {
    return getFieldValue(ref);
  }

  String val       = getFieldValue(ref);
  String vocabName = VOCABID_TO_VOCABNAME.get(val);

  if (val       == null) return "";
  if (vocabName == null) return "";
  return vocabName;
}

/* Shorthand for writing getFieldValue(ref, true). This function's use is
 * discouraged in favour of writing `getFieldValue(ref, true)`.
 */
String getMenuValue(String ref) {
  return getFieldValue(ref, true);
}

/******************************************************************************/
/*                                 ACTION BAR                                 */
/******************************************************************************/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
  actionOnLabel() {
    "{Clean_Synced_Files}";
  }
  actionOn() {
    cleanSyncedFiles();
  }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Sync}";
  }
  actionOn() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
    showToast("{Sync_Disabled}");
  }
  isActionOff() {
    isSyncEnabled();
  }
  actionOffLabel() {
    "{Enable_Sync}";
  }
  actionOff() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
    showToast("{Sync_Enabled}");
  }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Internal_GPS}";
  }
  actionOn() {
    stopGPS();
    showToast("{Internal_GPS_Disabled}");
    updateGPSDiagnostics();
  }
  isActionOff() {
    isInternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_Internal_GPS}";
  }
  actionOff() {
    if(isExternalGPSOn()) {
      stopGPS();
    }
    startInternalGPS();
    showToast("{Internal_GPS_Enabled}");
    updateGPSDiagnostics();
  }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_External_GPS}";
  }
  actionOn() {
    stopGPS();
    if (isBluetoothConnected()) {
      showToast("{External_GPS_Disabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
    }
    updateGPSDiagnostics();
  }
  isActionOff() {
    isExternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_External_GPS}";
  }
  actionOff() {
    if(isInternalGPSOn()) {
      stopGPS();
    }
    startExternalGPS();
    if(isBluetoothConnected()) {
      showToast("{External_GPS_Enabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
      this.actionOn();
    }
    updateGPSDiagnostics();
  }
});

/******************************************************************************/
/*                                    GPS                                     */
/******************************************************************************/
addOnEvent("Control/Contexts/GPS_Diagnostics", "show", "updateGPSDiagnostics()");

void updateGPSDiagnostics() {
  String diagnosticsRef = "Control/Contexts/GPS_Diagnostics";
  if (diagnosticsRef.equals("")) {
    return;
  }

  String status         = "";
  String previousStatus = getFieldValue(diagnosticsRef);
  String notInitialised = "{GPS_is_not_initialised}";

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) { // previous gps status is some last valid coordinate.
      // This is hackish. Arch16n substitution happens only at display-time, but the following if clause requires substitution to have happened at run-time
      String error = "";
      error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      setFieldValue(diagnosticsRef, error);   // Arch16n entry is substituted after this
      error = getFieldValue(diagnosticsRef);

      // check that error message wasn't previously appended to the previous status message.
      if (previousStatus.length()    >= error.length() &&
          previousStatus.subSequence(0, error.length()).equals(error)) {
        status = previousStatus;
      } else {
        status = error + "\n" + previousStatus;
      }
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
  }
  setFieldValue(diagnosticsRef, status);
}

/******************************************************************************/
/*                                 USER LOGIN                                 */
/******************************************************************************/
String userId    = "1";
String nameFirst = "";
String nameLast  = "";
String email     = "";
User   user      = new User(userId, nameFirst, nameLast, email);
setUser(user);

String userMenuPath = "User/User_List/Users";

void populateListForUsers(){
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null;";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(userMenuPath, result, true);
    }
  });
}

void selectUser() {
  String userVocabId = getFieldValue(userMenuPath);
  if (isNull(userVocabId)) {
    username = "";
    userid = "";
    return;
  }
  String userQ        = "SELECT userid,fname,lname,email FROM user " +
                        "WHERE  userid='" + userVocabId + "';";
  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      user = new User(
            result.get(0),
            result.get(1),
            result.get(2),
            result.get(3)
      );
      setUser(user);
      username = result.get(1) + " " + result.get(2);
      userid   = result.get(0);
    }
  };

  fetchOne(userQ, callback);
}

addOnEvent(userMenuPath, "show",  "populateListForUsers()");
addOnEvent(userMenuPath, "click", "selectUser()");

/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/** Fetches the contents of a specifed vocabulary and stores it in the given list. **/
void fetchVocab(String vocabName, List storageList) {
  fetchVocab(vocabName, storageList, null);
}
void fetchVocab(String vocabName, List storageList, String callbackFunction) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      storageList.addAll(result);
      Log.d("fetchVocab()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Wrapper for to make a vocab without an exlusion list **/
void makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
void makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
void makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    String pictureGalleryQuery = "SELECT vocabid, vocabname, pictureurl "+
                                 "  FROM vocabulary "+
                                 "  LEFT OUTER JOIN attributekey USING (attributeid) "+
                                 " WHERE attributename = '" + attrib + "' "+
                                 " ORDER BY  vocabcountorder;";
    fetchAll(pictureGalleryQuery, new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalPictureGallery")) {
    populateHierarchicalPictureGallery(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = '" + attrib + "' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        Boolean hasNull =
                vocabExclusions == null
            || !vocabExclusions.contains("")
            && !vocabExclusions.contains(null);
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, hasNull);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

makeVocab("DropDown", "Trench/Trench/Trench_Dimensions", "Trench Dimensions");
makeVocab("CheckBoxGroup", "Trench/Trench/Excavation_Method", "Excavation Method");
makeVocab("DropDown", "Trench_Files/Add_Trench_Files/File_Type", "File Type");
makeVocab("CheckBoxGroup", "Context/General/Excavation_Method", "Excavation Method");
makeVocab("DropDown", "Context/General/Horizon_Boundary", "Horizon Boundary");
makeVocab("DropDown", "Context/General/Contamination", "Contamination");
makeVocab("PictureGallery", "Context/General/Context_Type", "Context Type");
makeVocab("DropDown", "Context/Cut/Cut_Your_Interpretation", "Cut Your Interpretation");
makeVocab("DropDown", "Context/Cut/Shape_of_Cut", "Shape of Cut");
makeVocab("RadioGroup", "Context/Cut/Shape_of_Corners", "Shape of Corners");
makeVocab("RadioGroup", "Context/Cut/Break_of_Slope_-_Top", "Break of Slope - Top");
makeVocab("RadioGroup", "Context/Cut/Break_of_Slope_-_Base", "Break of Slope - Base");
makeVocab("DropDown", "Context/Cut/Sides_of_Cut", "Sides of Cut");
makeVocab("HierarchicalDropDown", "Context/Cut/Shape_of_Base", "Shape of Base");
makeVocab("DropDown", "Context/Cut/Orientation", "Orientation");
makeVocab("DropDown", "Context/Cut/Inclination_of_axis", "Inclination of axis");
makeVocab("DropDown", "Context/Deposit/Deposit_Your_Interpretation", "Deposit Your Interpretation");
makeVocab("DropDown", "Context/Deposit/Soil_Compaction_Type", "Soil Compaction Type");
makeVocab("PictureGallery", "Context/Deposit/Soil_Particle_Sorting", "Soil Particle Sorting");
makeVocab("DropDown", "Context/Deposit/Soil_Texture", "Soil Texture");
makeVocab("DropDown", "Context/Deposit/Composition_Type", "Composition Type");
makeVocab("DropDown", "Context/Deposit/Deposit_Bedding", "Deposit Bedding");
makeVocab("RadioGroup", "Context/Deposit/Sterile", "Sterile");
makeVocab("HierarchicalDropDown", "Context/Soil_Texture_Helper/Soil_Texture_Helper", "Soil Texture Helper");
makeVocab("DropDown", "Context/Vars/Device_Code", "Device Code");
makeVocab("RadioGroup", "Context_Group/Gen/Record_Type", "Record Type");
makeVocab("DropDown", "Context_Group/Vars/Device_Code", "Device Code");
makeVocab("DropDown", "Matrix/Matrix/Component", "Component");
makeVocab("HierarchicalPictureGallery", "Matrix/Matrix/Shape", "Shape");
makeVocab("DropDown", "Photograph_Log/Photograph_Log/Scene_Type", "Scene Type");
makeVocab("DropDown", "Photograph_Log/Vars/Device_Code", "Device Code");
makeVocab("DropDown", "FCN/General/Collection_Method", "Collection Method");
makeVocab("HierarchicalDropDown", "FCN/General/FCN_Class", "FCN Class");
makeVocab("RadioGroup", "FCN/General/Washed", "Washed");
makeVocab("RadioGroup", "FCN/General/Weighted", "Weighted");
makeVocab("RadioGroup", "FCN/General/Analyzed", "Analyzed");
makeVocab("HierarchicalDropDown", "Soil_Munsel_Color/Add_Soil_Munsel_Color/Soil_Munsel_Color", "Soil Munsel Color");
makeVocab("DropDown", "User/User_List/Device_Code", "Device Code");

/******************************************************************************/
/*                                 VALIDATION                                 */
/******************************************************************************/
/* `ref`  is a reference/path to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
List fieldPair(String ref, String name, String cond) {
  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);
  return fp;
}

List fieldPair(String ref, String name) {
  String t = "true";
  return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
boolean isValidField(String ref) {
  return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
String validateFields(List fields, String format) {
  Integer numInvalid = 0;

  /* Build validation message string (and count how many invalid fields exist) */
  String out = "Please fill out the following fields:\n";
  for(f : fields) {
    String ref  = f.get(0); // Reference to field
    String name = f.get(1); // Human-readable name
    String cond = f.get(2); // Validation condition

    // Only validate a field whose validation condition evaluates to `true`
    Boolean doValidateField = (Boolean) eval(cond);
    if (!doValidateField)
      continue;

    // Add any invalid fields to the output and tally them
    if (!isValidField(ref)) {
      out += "- " + name + "\n";
      numInvalid++;
    }
  }
  // All the fields are valid; just overwrite `out` with a cheery message
  if (numInvalid == 0)
    out = "All fields contain valid data!";

  /* Format the output as dictated by `format` */
  if (format == "HTML") {
    out = out.replace("\n", "<br>");
  } else if (format == "PLAINTEXT") {
    ;
  }

  return out;
}

void validateControl() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Control/Contexts/New_Site_Name", "{New_Site_Name}"));
  f.add(fieldPair("Control/Contexts/Year_of_Campaign", "{Year_of_Campaign}"));
  f.add(fieldPair("Control/Next_IDs/Next_Context_Context_ID", "{Locus_ID}"));
  f.add(fieldPair("Control/Next_IDs/Next_Context_Group_ID", "{Stratum_Feature_ID}"));
  f.add(fieldPair("Control/Next_IDs/Next_FCN_ID", "{Next_FCN_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}
void validateSite() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Site/Site/Trench_ID", "{Trench_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}
void validateTrench() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Trench/Trench/Excavation_Method", "{Excavation_Method}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}
void validateContext() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Context/General/Context_Site_Name", "{Site_Name}"));
  f.add(fieldPair("Context/General/Context_Context_ID", "{Locus_ID}"));
  f.add(fieldPair("Context/General/Excavation_Method", "{Excavation_Method}"));
  f.add(fieldPair("Context/Measure/Highest_Level", "{Absolute_Height_Top__m_}"));
  f.add(fieldPair("Context/Measure/Lowest_Level", "{Absolute_Height_Bottom__m_}"));
  f.add(fieldPair("Context/Measure/Measure_Length", "{Length__m_}"));
  f.add(fieldPair("Context/Measure/Measure_Width", "{Width__m_}"));
  f.add(fieldPair("Context/Measure/Measure_Depth", "{Depth__m_}"));
  f.add(fieldPair("Context/Measure/Volume", "{Volume__liters_}"));
  f.add(fieldPair("Context/Cut/Cut_Your_Interpretation", "{Your_Interpretation}"));
  f.add(fieldPair("Context/Cut/Shape_of_Cut", "{Shape_in_Plan}"));
  f.add(fieldPair("Context/Cut/Shape_of_Corners", "{Shape_of_Corners}"));
  f.add(fieldPair("Context/Cut/Break_of_Slope_-_Top", "{Break_of_Slope___Top}"));
  f.add(fieldPair("Context/Cut/Break_of_Slope_-_Base", "{Break_of_Slope___Base}"));
  f.add(fieldPair("Context/Cut/Sides_of_Cut", "{Sides_of_Cut}"));
  f.add(fieldPair("Context/Cut/Shape_of_Base", "{Shape_of_Base}"));
  f.add(fieldPair("Context/Cut/Orientation", "{Orientation}"));
  f.add(fieldPair("Context/Cut/Orientation_Degree", "{Orientation_Degree}"));
  f.add(fieldPair("Context/Cut/Inclination_of_axis", "{Inclination_of_axis}"));
  f.add(fieldPair("Context/Deposit/Deposit_Your_Interpretation", "{Your_Interpretation}"));
  f.add(fieldPair("Context/Deposit/Soil_Compaction_Type", "{Texture}"));
  f.add(fieldPair("Context/Deposit/Soil_Texture", "{Material}"));
  f.add(fieldPair("Context/Deposit/Composition_Type", "{Deposit_Structure}"));
  f.add(fieldPair("Context/Deposit/Deposit_Bedding", "{Bedding}"));
  f.add(fieldPair("Context/Deposit/Deposit_Inclusions", "{Deposit_Inclusions}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Head", "{Head}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Body", "{Body}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Left_Arm", "{Left_Arm_and_Hand_Location}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Right_Arm", "{Right_Arm_and_Hand_Location}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Left_Leg", "{Left_Leg_and_Foot_Location}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Right_Leg", "{Right_Leg_and_Foot_Location}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Condition", "{Condition}"));
  f.add(fieldPair("Context/Skeleton/Target_A_X", "{Target_A_X}"));
  f.add(fieldPair("Context/Skeleton/Target_A_Y", "{Target_A_Y}"));
  f.add(fieldPair("Context/Skeleton/Target_A_Z", "{Target_A_Z}"));
  f.add(fieldPair("Context/Int/Your_description", "{Your_Description}"));
  f.add(fieldPair("Context/Int/Your_Discussion", "{Your_Discussion}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}
void validateContextGroup() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Context_Group/Gen/Record_Type", "{Record_Type}"));
  f.add(fieldPair("Context_Group/Gen/Feature_Prefix", "{Feature_Prefix}"));
  f.add(fieldPair("Context_Group/Gen/Context_Group_ID", "{Stratum_Feature_ID}"));
  f.add(fieldPair("Context_Group/Gen/CG_Your_description", "{Description}"));
  f.add(fieldPair("Context_Group/Gen/CG_Your_Interpretation", "{Interpretation}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}
void validateRelationship() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Relationship/Relationships/AreaCode", "{Trench_ID}"));
  f.add(fieldPair("Relationship/Relationships/Context_ID", "{Locus_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}
void validateContextGroupRelationship() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Context_Group_Relationship/Relationships/AreaCode", "{Trench_ID}"));
  f.add(fieldPair("Context_Group_Relationship/Relationships/Context_ID", "{Locus_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}
void validateFCN() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("FCN/General/FCN_ID", "{FCN_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}
void validateLegacy() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Legacy/Legacy/Legacy_Year_of_Campaign", "{Legacy_Year_of_Campaign}"));
  f.add(fieldPair("Legacy/Legacy/Legacy_AreaCode", "{Trench_ID}"));
  f.add(fieldPair("Legacy/Legacy/Legacy_Context_ID", "{Locus_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}


/******************************************************************************/
/*                                 AUTOSAVING                                 */
/******************************************************************************/
Map tabgroupToUuid = Collections.synchronizedMap(new HashMap());

String getUuid(String tabgroup) {
  return tabgroupToUuid.get(tabgroup);
}

void setUuid(String tabgroup, String uuid) {
  tabgroupToUuid.put(tabgroup, uuid);
}

void saveTabGroup(String tabgroup) {
  saveTabGroup(tabgroup, "");
}

void saveTabGroup(String tabgroup, String callback) {
  Boolean enableAutosave      = true;
  String  id                  = getUuid(tabgroup);
  List    geometry            = null;
  List    attributes          = null;
  String  parentTabgroup_     = parentTabgroup;
  String  parentTabgroupUuid_ = getUuid(parentTabgroup_);
  Boolean userWasSet          = !username.equals("");

  callback += "; onSave" + getArchEntTypePascalCased(tabgroup) + "__()";

  parentTabgroup = null;

  SaveCallback saveCallback  = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      // Make a child-parent relationship if need be.
      if (
          newRecord &&
          !isNull(parentTabgroup_) &&
          !isNull(parentTabgroupUuid_)
      ) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          parentTabgroupUuid_,
          uuid,
          "Parent Of",
          "Child Of",
          callback
        );
      } else {
        execute(callback);
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveTabGroup` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveTabGroup(tabgroup, callback);
      }

    }
    onError(message) {
      showToast(message);
    }
  };

  saveTabGroup(tabgroup, id, geometry, attributes, saveCallback, enableAutosave);
}

void setToTimestampNow(String ref) {
  String now = getTimestampNow();
  setFieldValue(ref, now);
}

String getTimestampNow() {
  String fmt = "yyyy-MM-dd HH:mm:ssZ";
  return getTimestampNow(fmt);
}

String getTimestampNow(String fmt) {
  date    = new Date();
  dateFmt = new java.text.SimpleDateFormat(fmt);
  dateStr = dateFmt.format(date);

  // Insert colon into timezone (e.g. +1000 -> +10:00)
  String left; String right;

  left    = dateStr.substring(0, dateStr.length() - 2);
  right   = dateStr.substring(   dateStr.length() - 2);
  dateStr = left + ":" + right;

  return dateStr;
}

void populateAuthorAndTimestamp(String tabgroup) {
  Map tabgroupToAuthor    = new HashMap();
  Map tabgroupToTimestamp = new HashMap();
  tabgroupToAuthor.put("Trench", "Trench/Trench/Trench_author");
  tabgroupToAuthor.put("Trench_Files", "Trench_Files/Add_Trench_Files/Trench_Files_author");
  tabgroupToAuthor.put("Context", "Context/General/Context_author");
  tabgroupToAuthor.put("Context_Group", "Context_Group/Gen/Context_Group_author");
  tabgroupToAuthor.put("Diary", "Diary/Diary/Diary_author");
  tabgroupToTimestamp.put("Trench", "Trench/Trench/Trench_timestamp");
  tabgroupToTimestamp.put("Context", "Context/General/Context_timestamp");
  tabgroupToTimestamp.put("Context_Group", "Context_Group/Gen/Context_Group_timestamp");
  tabgroupToTimestamp.put("Diary", "Diary/Diary/Diary_timestamp");
  String authorPath    = tabgroupToAuthor.get(tabgroup);
  String timestampPath = tabgroupToTimestamp.get(tabgroup);

  String authorVal    = username;
  String timestampVal = getTimestampNow();

  if (!isNull(authorPath))    setFieldValue(authorPath,    authorVal);
  if (!isNull(timestampPath)) setFieldValue(timestampPath, timestampVal);
}

void onShowSite () {
  saveTabGroup("Site");
}

void onShowTrench () {
  saveTabGroup("Trench");
}

void onShowTrenchFiles () {
  saveTabGroup("Trench_Files");
}

void onShowContext () {
  saveTabGroup("Context");
}

void onShowContextGroup () {
  saveTabGroup("Context_Group");
}

void onShowMatrix () {
  saveTabGroup("Matrix");
}

void onShowPhotographLog () {
  saveTabGroup("Photograph_Log");
}

void onShowDiary () {
  saveTabGroup("Diary");
}

void onShowFCN () {
  saveTabGroup("FCN");
}

void onShowSoilMunselColor () {
  saveTabGroup("Soil_Munsel_Color");
}

void onShowLegacy () {
  saveTabGroup("Legacy");
}

addOnEvent("Site", "show", "onShowSite()");
addOnEvent("Trench", "show", "onShowTrench()");
addOnEvent("Trench_Files", "show", "onShowTrenchFiles()");
addOnEvent("Context", "show", "onShowContext()");
addOnEvent("Context_Group", "show", "onShowContextGroup()");
addOnEvent("Matrix", "show", "onShowMatrix()");
addOnEvent("Photograph_Log", "show", "onShowPhotographLog()");
addOnEvent("Diary", "show", "onShowDiary()");
addOnEvent("FCN", "show", "onShowFCN()");
addOnEvent("Soil_Munsel_Color", "show", "onShowSoilMunselColor()");
addOnEvent("Legacy", "show", "onShowLegacy()");

void onClickUserUserListLogin () {
  newTab("Control", true);
}

void onClickUserUserListModuleGuide () {
  newTab("User/Help", true);
}

void onClickTrenchTrenchSetDateClosed () {
  newTab("Date_Closed", true);
}

void onClickContextDepositSoilTextureHelper () {
  newTab("Context/Soil_Texture_Helper", true);
}

void onClickContextRelationshipsCreateRelationshipstoThisContext () {
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  
  newTab("Relationship", true);
}

void onClickContextGroupContextGroupContextsCreateRelationshipstoThisContextGroup () {
  String tabgroup = "Context_Group";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  
  newTab("Context_Group_Relationship", true);
}

void onClickControlContextsCreateNewSite () {
  parentTabgroup__ = "Control";
  newSite();
}

void onClickSiteSiteTrenches () {
  String tabgroup = "Site";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newTrench();
}

void onClickTrenchTrenchAddTrenchFiles () {
  String tabgroup = "Trench";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newTrenchFiles();
}

void onClickTrenchLociCreateNewLocus () {
  String tabgroup = "Trench";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newContext();
}

void onClickTrenchStrataFeaturesCreateNewStratum () {
  String tabgroup = "Trench";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newContextGroup();
}

void onClickTrenchFCNsCreateNewFCN () {
  String tabgroup = "Trench";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newFCN();
}

void onClickTrenchDiariesCreateNewDiary () {
  String tabgroup = "Trench";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newDiary();
}

void onClickTrenchLegaciesCreateNewLegacy () {
  String tabgroup = "Trench";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newLegacy();
}

void onClickContextDepositAddMunselColor () {
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newSoilMunselColor();
}

void onClickContextDepositAddNewMatrix () {
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newMatrix();
}

void onClickContextFCNAddFCN () {
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newFCN();
}

void onClickContextAddAddPhotographLog () {
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newPhotographLog();
}

void onClickContextGroupAddAddPhotographLog () {
  String tabgroup = "Context_Group";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newPhotographLog();
}
addOnEvent("User/User_List/Login", "click", "onClickUserUserListLogin()");
addOnEvent("User/User_List/Module_Guide", "click", "onClickUserUserListModuleGuide()");
addOnEvent("Trench/Trench/Set_Date_Closed", "click", "onClickTrenchTrenchSetDateClosed()");
addOnEvent("Context/Deposit/Soil_Texture_Helper", "click", "onClickContextDepositSoilTextureHelper()");
addOnEvent("Context/Relationships/Create_Relationships_to_This_Context", "click", "onClickContextRelationshipsCreateRelationshipstoThisContext()");
addOnEvent("Context_Group/Context_Group_Contexts/Create_Relationships_to_This_Context_Group", "click", "onClickContextGroupContextGroupContextsCreateRelationshipstoThisContextGroup()");
addOnEvent("Control/Contexts/Create_New_Site", "click", "onClickControlContextsCreateNewSite()");
addOnEvent("Site/Site/Trenches", "click", "onClickSiteSiteTrenches()");
addOnEvent("Trench/Trench/Add_Trench_Files", "click", "onClickTrenchTrenchAddTrenchFiles()");
addOnEvent("Trench/Loci/Create_New_Locus", "click", "onClickTrenchLociCreateNewLocus()");
addOnEvent("Trench/Strata_Features/Create_New_Stratum", "click", "onClickTrenchStrataFeaturesCreateNewStratum()");
addOnEvent("Trench/FCNs/Create_New_FCN", "click", "onClickTrenchFCNsCreateNewFCN()");
addOnEvent("Trench/Diaries/Create_New_Diary", "click", "onClickTrenchDiariesCreateNewDiary()");
addOnEvent("Trench/Legacies/Create_New_Legacy", "click", "onClickTrenchLegaciesCreateNewLegacy()");
addOnEvent("Context/Deposit/Add_Munsel_Color", "click", "onClickContextDepositAddMunselColor()");
addOnEvent("Context/Deposit/Add_New_Matrix", "click", "onClickContextDepositAddNewMatrix()");
addOnEvent("Context/FCN/Add_FCN", "click", "onClickContextFCNAddFCN()");
addOnEvent("Context/Add/Add_Photograph_Log", "click", "onClickContextAddAddPhotographLog()");
addOnEvent("Context_Group/Add/Add_Photograph_Log", "click", "onClickContextGroupAddAddPhotographLog()");

/******************************************************************************/
/*                   AUDIO, CAMERA, FILE AND VIDEO BINDINGS                   */
/******************************************************************************/

addOnEvent("Trench_Files/Add_Trench_Files/Add_Photo_Button_1", "click", "attachPictureTo(\"Trench_Files/Add_Trench_Files/Add_Photo\")");
addOnEvent("Context/General/Photo_of_Plan_Button_1", "click", "attachPictureTo(\"Context/General/Photo_of_Plan\")");
addOnEvent("Context/General/Photo_of_Section_Button_1", "click", "attachPictureTo(\"Context/General/Photo_of_Section\")");
addOnEvent("Context/Add/Photo_Button_1", "click", "attachPictureTo(\"Context/Add/Photo\")");
addOnEvent("Context_Group/Add/Photo_Button_1", "click", "attachPictureTo(\"Context_Group/Add/Photo\")");
addOnEvent("Diary/Diary/Photo_Button_1", "click", "attachPictureTo(\"Diary/Diary/Photo\")");
addOnEvent("FCN/General/Attach_Photograph_Button_1", "click", "attachPictureTo(\"FCN/General/Attach_Photograph\")");
addOnEvent("Trench_Files/Add_Trench_Files/Attach_File_Button_1", "click", "attachFileTo(\"Trench_Files/Add_Trench_Files/Attach_File\")");
addOnEvent("Context/Add/Attach_File_Button_1", "click", "attachFileTo(\"Context/Add/Attach_File\")");
addOnEvent("Context_Group/Add/Attach_File_Button_1", "click", "attachFileTo(\"Context_Group/Add/Attach_File\")");
addOnEvent("FCN/General/Attach_File_Button_1", "click", "attachFileTo(\"FCN/General/Attach_File\")");


/******************************************************************************/
/*                 BINDINGS FOR 'VIEW ATTACHED FILES' BUTTONS                 */
/******************************************************************************/
addOnEvent("Trench_Files/Add_Trench_Files/View_Attached_Files", "click", "viewArchEntAttachedFiles(getUuid(\"Trench_Files\"))");
addOnEvent("Context/Add/View_Attached_Files", "click", "viewArchEntAttachedFiles(getUuid(\"Context\"))");
addOnEvent("Context_Group/Add/View_Attached_Files", "click", "viewArchEntAttachedFiles(getUuid(\"Context_Group\"))");
addOnEvent("FCN/General/View_Attached_Files", "click", "viewArchEntAttachedFiles(getUuid(\"FCN\"))");

/******************************************************************************/
/*                             NAVIGATION DRAWER                              */
/******************************************************************************/
void removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
  removeNavigationButton("validate");
}

void addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  tabgroupsToValidate.add("Control");
  tabgroupsToValidate.add("Context_Group");
  tabgroupsToValidate.add("Relationship");
  tabgroupsToValidate.add("Context_Group_Relationship");
  tabgroupsToValidate.add("Site");
  tabgroupsToValidate.add("Trench");
  tabgroupsToValidate.add("Legacy");
  tabgroupsToValidate.add("Context");
  tabgroupsToValidate.add("FCN");
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(isNull(getUuid(tabgroup))) {
        showAlert(
            "{Warning}",
            "{The_current_record_has_not_been_saved_yet}",
            fun2str("newRecord", new Object[]{tabgroup, true}),
            ""
        );
      } else {
        newRecord(tabgroup, true);
        showToast("{New_record_created}");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
        duplicateRecord(tabgroup);
      } else {
        showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

/******************************************************************************/
/*        ENTITY AND RELATIONSHIP SAVING AND LOADING HELPER FUNCTIONS         */
/******************************************************************************/
/** Saves two entity id's as a relation. **/
void saveEntitiesToRel(String type, String entity1, String entity2) {
  String callback = null;
  saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
void saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
  String e1verb = null;
  String e2verb = null;
  saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
void saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
  if (isNull(entity1) || isNull(entity2)) return;
  saveRel(null, type, null, null, new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, e1verb);
      addReln(entity2, rel_id, e2verb);
      if(!isNull(callback)) {
         execute(callback);
      }
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  });
}

// Makes a new record of the given tabgroup
void newRecord(String tabgroup) {
  boolean doUpdateRelVars = false;
  newRecord(tabgroup, doUpdateRelVars);
}

void newRecord(String tabgroup, boolean doUpdateRelVars) {
  if (doUpdateRelVars) {
    String uuidOld = getUuid(getDisplayedTabGroup());
    String q       = getDuplicateRelnQuery(uuidOld); // We're not duplicating
                                                     // anything, just getting
                                                     // the parent's UUID.

    cancelTabGroup(tabgroup, false);

    FetchCallback updateRelVars = new FetchCallback() {
      onFetch(result) {
        if (result != null && result.size() >= 1) {
          parentTabgroup   = result.get(0).get(4);
          parentTabgroup   = parentTabgroup.replaceAll(" ", "_");
          parentTabgroup__ = parentTabgroup;
        }

        newRecord(tabgroup, false);
      }
    };
    fetchAll(q, updateRelVars);
    return;
  }

  String newTabGroupFunction = "new" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "newTabgroup()"
  eval(newTabGroupFunction);

  Log.d("newRecord", tabgroup);
}

// Deletes the current record of the given tabgroup
void deleteRecord(String tabgroup) {
  String deleteTabGroupFunction = "delete" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "deleteTabgroup()"
  eval(deleteTabGroupFunction);

  Log.d("deleteRecord", tabgroup);
}

// Duplicates the current record of the given tabgroup
void duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "Please wait...");

  String duplicateTabGroupFunction = "duplicate" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "duplicateTabgroup()"
  eval(duplicateTabGroupFunction);

  Log.d("duplicateRecord", tabgroup);
}

// generic fetch saved attributes query
String getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  if (attributesToDupe.equals("")) {
    attributesToDupe = "''";
  }
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
                          "  FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
                          " WHERE attributename IN ('', "+attributesToDupe+") " +
                          "   AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

String getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, parentuuid, parentaenttypename, childaenttypename"+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE childuuid = '"+originalRecordID+"' " +
                         "   AND parentparticipatesverb = 'Parent Of' ";
  return dupeRelnQuery;
}

void makeDuplicateRelationships(fetchedAttributes, String newUuid){
  Log.e("Module", "makeDuplicateRelationships");
  for (savedAttribute : fetchedAttributes){
    String relntypename           = savedAttribute.get(0);
    String parentparticipatesverb = savedAttribute.get(1);
    String childparticipatesverb  = savedAttribute.get(2);
    String parentUuid             = savedAttribute.get(3);
    String childArchEntType       = savedAttribute.get(5);

    String onSaveRel              = "onSave" + childArchEntType.replaceAll(" ", "") + "__()";

    saveEntitiesToHierRel(
        relntypename,
        parentUuid,
        newUuid,
        parentparticipatesverb,
        childparticipatesverb,
        onSaveRel
    );
  }
}

// generic get extra attributes
List getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(
      createEntityAttribute(
        savedAttribute.get(0),
        savedAttribute.get(1),
        savedAttribute.get(2),
        savedAttribute.get(3),
        savedAttribute.get(4)
      )
    );
  }
  return extraAttributes;
}

void loadEntity() {
  loadEntity(false);
}
void loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

void loadEntityFrom(String entityID) {
  String head = "Record Could Not Be Loaded";
  String body;

  if (isNull(entityID)) {
    body = "A record cannot be loaded from a null uuid.";
    showWarning(head, body);
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  fetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      if (
          result               == null ||
          result       .size() == 0    ||
          result.get(0).size() == 0
      ) {
        body  = "The record could not be loaded. It may have been deleted by";
        body += " another user.";

        showWarning(head, body);
        return;
      }

      String archEntName = result.get(0).get(0).replaceAll(" ", "");
      String loadFunction = "load" + archEntName + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}

void newSite (){
  String tabgroup = "Site";
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  onCreateSite__();
}
void newTrench (){
  String tabgroup = "Trench";
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  onCreateTrench__();
}
void newTrenchFiles (){
  String tabgroup = "Trench_Files";
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  onCreateTrenchFiles__();
}
void newContext (){
  String tabgroup = "Context";
  if (isNull("Control/Next_IDs/Next_Context_Context_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("Context/General/Context_Context_ID");

  onCreateContext__();
}
void newContextGroup (){
  String tabgroup = "Context_Group";
  if (isNull("Control/Next_IDs/Next_Context_Group_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("Context_Group/Gen/Context_Group_ID");

  onCreateContextGroup__();
}
void newMatrix (){
  String tabgroup = "Matrix";
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  onCreateMatrix__();
}
void newPhotographLog (){
  String tabgroup = "Photograph_Log";
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  onCreatePhotographLog__();
}
void newDiary (){
  String tabgroup = "Diary";
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  onCreateDiary__();
}
void newFCN (){
  String tabgroup = "FCN";
  if (isNull("Control/Next_IDs/Next_FCN_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("FCN/General/FCN_ID");

  onCreateFCN__();
}
void newSoilMunselColor (){
  String tabgroup = "Soil_Munsel_Color";
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  onCreateSoilMunselColor__();
}
void newLegacy (){
  String tabgroup = "Legacy";
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  onCreateLegacy__();
}
void onCreateSite__(){
  String ref      = "Site";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateTrench__(){
  String ref      = "Trench";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateTrenchFiles__(){
  String ref      = "Trench_Files";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateContext__(){
  String ref      = "Context";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateContextGroup__(){
  String ref      = "Context_Group";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateMatrix__(){
  String ref      = "Matrix";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreatePhotographLog__(){
  String ref      = "Photograph_Log";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateDiary__(){
  String ref      = "Diary";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateFCN__(){
  String ref      = "FCN";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateSoilMunselColor__(){
  String ref      = "Soil_Munsel_Color";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateLegacy__(){
  String ref      = "Legacy";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchSite__(){
  String ref      = "Site";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchTrench__(){
  String ref      = "Trench";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchTrenchFiles__(){
  String ref      = "Trench_Files";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchContext__(){
  String ref      = "Context";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchContextGroup__(){
  String ref      = "Context_Group";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchMatrix__(){
  String ref      = "Matrix";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchPhotographLog__(){
  String ref      = "Photograph_Log";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchDiary__(){
  String ref      = "Diary";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchFCN__(){
  String ref      = "FCN";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchSoilMunselColor__(){
  String ref      = "Soil_Munsel_Color";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchLegacy__(){
  String ref      = "Legacy";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchSite__(){
  String ref      = "Site";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchTrench__(){
  String ref      = "Trench";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchTrenchFiles__(){
  String ref      = "Trench_Files";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchContext__(){
  String ref      = "Context";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchContextGroup__(){
  String ref      = "Context_Group";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchMatrix__(){
  String ref      = "Matrix";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchPhotographLog__(){
  String ref      = "Photograph_Log";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchDiary__(){
  String ref      = "Diary";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchFCN__(){
  String ref      = "FCN";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchSoilMunselColor__(){
  String ref      = "Soil_Munsel_Color";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchLegacy__(){
  String ref      = "Legacy";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveSite__(){
  String ref      = "Site";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveTrench__(){
  String ref      = "Trench";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveTrenchFiles__(){
  String ref      = "Trench_Files";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveContext__(){
  String ref      = "Context";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveContextGroup__(){
  String ref      = "Context_Group";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveMatrix__(){
  String ref      = "Matrix";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSavePhotographLog__(){
  String ref      = "Photograph_Log";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveDiary__(){
  String ref      = "Diary";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveFCN__(){
  String ref      = "FCN";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveSoilMunselColor__(){
  String ref      = "Soil_Munsel_Color";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveLegacy__(){
  String ref      = "Legacy";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopySite__(){
  String ref      = "Site";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyTrench__(){
  String ref      = "Trench";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyTrenchFiles__(){
  String ref      = "Trench_Files";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyContext__(){
  String ref      = "Context";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyContextGroup__(){
  String ref      = "Context_Group";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyMatrix__(){
  String ref      = "Matrix";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyPhotographLog__(){
  String ref      = "Photograph_Log";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyDiary__(){
  String ref      = "Diary";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyFCN__(){
  String ref      = "FCN";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopySoilMunselColor__(){
  String ref      = "Soil_Munsel_Color";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyLegacy__(){
  String ref      = "Legacy";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteSite__(){
  String ref      = "Site";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteTrench__(){
  String ref      = "Trench";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteTrenchFiles__(){
  String ref      = "Trench_Files";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteContext__(){
  String ref      = "Context";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteContextGroup__(){
  String ref      = "Context_Group";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteMatrix__(){
  String ref      = "Matrix";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeletePhotographLog__(){
  String ref      = "Photograph_Log";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteDiary__(){
  String ref      = "Diary";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteFCN__(){
  String ref      = "FCN";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteSoilMunselColor__(){
  String ref      = "Soil_Munsel_Color";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteLegacy__(){
  String ref      = "Legacy";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void duplicateSite(){
  String tabgroup = "Site";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  onCopySite__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateTrench(){
  String tabgroup = "Trench";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  onCopyTrench__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateTrenchFiles(){
  String tabgroup = "Trench_Files";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Trench_Files/Add_Trench_Files/Add_Photo", new ArrayList());
  populateFileList("Trench_Files/Add_Trench_Files/Attach_File", new ArrayList());
  onCopyTrenchFiles__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Add Photo");
      excludeAttributes.add("Attach File");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateContext(){
  String tabgroup = "Context";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("Context/General/Context_Context_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Context/General/Photo_of_Plan", new ArrayList());
  populateCameraPictureGallery("Context/General/Photo_of_Section", new ArrayList());
  populateCameraPictureGallery("Context/Add/Photo", new ArrayList());
  populateFileList("Context/Add/Attach_File", new ArrayList());
  onCopyContext__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Photo of Plan");
      excludeAttributes.add("Photo of Section");
      excludeAttributes.add("Photo");
      excludeAttributes.add("Attach File");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateContextGroup(){
  String tabgroup = "Context_Group";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("Context_Group/Gen/Context_Group_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Context_Group/Add/Photo", new ArrayList());
  populateFileList("Context_Group/Add/Attach_File", new ArrayList());
  onCopyContextGroup__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Photo");
      excludeAttributes.add("Attach File");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateMatrix(){
  String tabgroup = "Matrix";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  onCopyMatrix__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicatePhotographLog(){
  String tabgroup = "Photograph_Log";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  onCopyPhotographLog__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateDiary(){
  String tabgroup = "Diary";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Diary/Diary/Photo", new ArrayList());
  onCopyDiary__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Photo");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateFCN(){
  String tabgroup = "FCN";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("FCN/General/FCN_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateFileList("FCN/General/Attach_File", new ArrayList());
  populateCameraPictureGallery("FCN/General/Attach_Photograph", new ArrayList());
  onCopyFCN__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Attach File");
      excludeAttributes.add("Attach Photograph");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateSoilMunselColor(){
  String tabgroup = "Soil_Munsel_Color";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  onCopySoilMunselColor__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateLegacy(){
  String tabgroup = "Legacy";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  onCopyLegacy__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void deleteSite(){
  String tabgroup = "Site";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteSite()", "doNotDelete()");
  }
}
void deleteTrench(){
  String tabgroup = "Trench";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteTrench()", "doNotDelete()");
  }
}
void deleteTrenchFiles(){
  String tabgroup = "Trench_Files";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteTrenchFiles()", "doNotDelete()");
  }
}
void deleteContext(){
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteContext()", "doNotDelete()");
  }
}
void deleteContextGroup(){
  String tabgroup = "Context_Group";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteContextGroup()", "doNotDelete()");
  }
}
void deleteMatrix(){
  String tabgroup = "Matrix";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteMatrix()", "doNotDelete()");
  }
}
void deletePhotographLog(){
  String tabgroup = "Photograph_Log";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeletePhotographLog()", "doNotDelete()");
  }
}
void deleteDiary(){
  String tabgroup = "Diary";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteDiary()", "doNotDelete()");
  }
}
void deleteFCN(){
  String tabgroup = "FCN";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteFCN()", "doNotDelete()");
  }
}
void deleteSoilMunselColor(){
  String tabgroup = "Soil_Munsel_Color";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteSoilMunselColor()", "doNotDelete()");
  }
}
void deleteLegacy(){
  String tabgroup = "Legacy";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteLegacy()", "doNotDelete()");
  }
}
void reallyDeleteSite (){
  String tabgroup = "Site";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteSite__();
}
void reallyDeleteTrench (){
  String tabgroup = "Trench";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteTrench__();
}
void reallyDeleteTrenchFiles (){
  String tabgroup = "Trench_Files";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteTrenchFiles__();
}
void reallyDeleteContext (){
  String tabgroup = "Context";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteContext__();
}
void reallyDeleteContextGroup (){
  String tabgroup = "Context_Group";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteContextGroup__();
}
void reallyDeleteMatrix (){
  String tabgroup = "Matrix";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteMatrix__();
}
void reallyDeletePhotographLog (){
  String tabgroup = "Photograph_Log";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeletePhotographLog__();
}
void reallyDeleteDiary (){
  String tabgroup = "Diary";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteDiary__();
}
void reallyDeleteFCN (){
  String tabgroup = "FCN";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteFCN__();
}
void reallyDeleteSoilMunselColor (){
  String tabgroup = "Soil_Munsel_Color";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteSoilMunselColor__();
}
void reallyDeleteLegacy (){
  String tabgroup = "Legacy";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteLegacy__();
}
addOnEvent("Site", "save", "populateEntityListsOfArchEnt(\"Site\")");
addOnEvent("Trench", "save", "populateEntityListsOfArchEnt(\"Trench\")");
addOnEvent("Trench_Files", "save", "populateEntityListsOfArchEnt(\"Trench_Files\")");
addOnEvent("Context", "save", "populateEntityListsOfArchEnt(\"Context\")");
addOnEvent("Context_Group", "save", "populateEntityListsOfArchEnt(\"Context_Group\")");
addOnEvent("Matrix", "save", "populateEntityListsOfArchEnt(\"Matrix\")");
addOnEvent("Photograph_Log", "save", "populateEntityListsOfArchEnt(\"Photograph_Log\")");
addOnEvent("Diary", "save", "populateEntityListsOfArchEnt(\"Diary\")");
addOnEvent("FCN", "save", "populateEntityListsOfArchEnt(\"FCN\")");
addOnEvent("Soil_Munsel_Color", "save", "populateEntityListsOfArchEnt(\"Soil_Munsel_Color\")");
addOnEvent("Legacy", "save", "populateEntityListsOfArchEnt(\"Legacy\")");

void doNotDelete(){
  showToast("{Delete_Cancelled}");
}

addOnEvent("Site", "show", "removeNavigationButtons()");
addOnEvent("Site", "show", "addNavigationButtons(\"Site\")");
addOnEvent("Trench", "show", "removeNavigationButtons()");
addOnEvent("Trench", "show", "addNavigationButtons(\"Trench\")");
addOnEvent("Trench_Files", "show", "removeNavigationButtons()");
addOnEvent("Trench_Files", "show", "addNavigationButtons(\"Trench_Files\")");
addOnEvent("Context", "show", "removeNavigationButtons()");
addOnEvent("Context", "show", "addNavigationButtons(\"Context\")");
addOnEvent("Context_Group", "show", "removeNavigationButtons()");
addOnEvent("Context_Group", "show", "addNavigationButtons(\"Context_Group\")");
addOnEvent("Matrix", "show", "removeNavigationButtons()");
addOnEvent("Matrix", "show", "addNavigationButtons(\"Matrix\")");
addOnEvent("Photograph_Log", "show", "removeNavigationButtons()");
addOnEvent("Photograph_Log", "show", "addNavigationButtons(\"Photograph_Log\")");
addOnEvent("Diary", "show", "removeNavigationButtons()");
addOnEvent("Diary", "show", "addNavigationButtons(\"Diary\")");
addOnEvent("FCN", "show", "removeNavigationButtons()");
addOnEvent("FCN", "show", "addNavigationButtons(\"FCN\")");
addOnEvent("Soil_Munsel_Color", "show", "removeNavigationButtons()");
addOnEvent("Soil_Munsel_Color", "show", "addNavigationButtons(\"Soil_Munsel_Color\")");
addOnEvent("Legacy", "show", "removeNavigationButtons()");
addOnEvent("Legacy", "show", "addNavigationButtons(\"Legacy\")");

/******************************************************************************/
/*                                   SEARCH                                   */
/******************************************************************************/
addOnEvent("Control/Search"               , "show"  , "search()");
addOnEvent("Control/Search/Entity_List"   , "click" , "loadEntity();");
addOnEvent("Control/Search/Search_Button" , "click" , "search()");
addOnEvent("Control/Search/Search_Term"   , "click" , "clearSearch()");

addOnEvent("Control/Search/Entity_Types"  , "click" , "search()");
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{All}", ""));
entityTypes.add(new NameValuePair("{Site}", "Site"));
entityTypes.add(new NameValuePair("{Trench}", "Trench"));
entityTypes.add(new NameValuePair("{Trench_Files}", "Trench Files"));
entityTypes.add(new NameValuePair("{Locus}", "Context"));
entityTypes.add(new NameValuePair("{Stratum_Feature}", "Context Group"));
entityTypes.add(new NameValuePair("{Sediment_Aggregate}", "Matrix"));
entityTypes.add(new NameValuePair("{Photograph_Log}", "Photograph Log"));
entityTypes.add(new NameValuePair("{Diary}", "Diary"));
entityTypes.add(new NameValuePair("{FCN}", "FCN"));
entityTypes.add(new NameValuePair("{Soil_Munsel_Color}", "Soil Munsel Color"));
entityTypes.add(new NameValuePair("{Legacy}", "Legacy"));
populateDropDown("Control/Search/Entity_Types", entityTypes);

void clearSearch(){
  setFieldValue("Control/Search/Search_Term","");
}

void search(){
  String refEntityList  = "Control/Search/Entity_List";
  String refSearchTerm  = "Control/Search/Search_Term";
  String refEntityTypes = "Control/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE '"+term+"'||'%'  "+
                       "                   AND ( aenttypename LIKE '"+type+"' OR '' = '"+type+"' ) "+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS("Control");

  Log.d("Module", "Search query: " + searchQuery);
}

void loadSiteFrom(String uuid) {
  String tabgroup = "Site";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchSite__();
    }
  };

  onPrefetchSite__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadTrenchFrom(String uuid) {
  String tabgroup = "Trench";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchTrench__();
    }
  };

  onPrefetchTrench__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadTrenchFilesFrom(String uuid) {
  String tabgroup = "Trench_Files";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchTrenchFiles__();
    }
  };

  onPrefetchTrenchFiles__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadContextFrom(String uuid) {
  String tabgroup = "Context";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchContext__();
    }
  };

  onPrefetchContext__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadContextGroupFrom(String uuid) {
  String tabgroup = "Context_Group";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchContextGroup__();
    }
  };

  onPrefetchContextGroup__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadMatrixFrom(String uuid) {
  String tabgroup = "Matrix";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchMatrix__();
    }
  };

  onPrefetchMatrix__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadPhotographLogFrom(String uuid) {
  String tabgroup = "Photograph_Log";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchPhotographLog__();
    }
  };

  onPrefetchPhotographLog__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadDiaryFrom(String uuid) {
  String tabgroup = "Diary";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchDiary__();
    }
  };

  onPrefetchDiary__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadFCNFrom(String uuid) {
  String tabgroup = "FCN";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchFCN__();
    }
  };

  onPrefetchFCN__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadSoilMunselColorFrom(String uuid) {
  String tabgroup = "Soil_Munsel_Color";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchSoilMunselColor__();
    }
  };

  onPrefetchSoilMunselColor__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadLegacyFrom(String uuid) {
  String tabgroup = "Legacy";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchLegacy__();
    }
  };

  onPrefetchLegacy__();
  showTabGroup(tabgroup, uuid, cb);
}

/******************************************************************************/
/*                          TAKE FROM GPS BUTTON(S)                           */
/******************************************************************************/
addOnEvent("Trench/Trench/Take_From_GPS_1", "click", "takePoint(\"Trench\")");
addOnEvent("FCN/General/Take_From_GPS_1", "click", "takePoint(\"FCN\")");

Map getTakeFromGpsMappings() {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("Trench", "Trench/Trench");
tabgroupToTabRef.put("FCN", "FCN/General");
  return tabgroupToTabRef;
}

/* Takes the current point using gps. */
void takePoint(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String archEntType = tabgroup.replaceAll("_", " ");
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)){
    showToast("Please enter data first and let a save occur.");
    return;
  }

  boolean isInternalGPSOff = !isInternalGPSOn();
  boolean isExternalGPSOff = !isExternalGPSOn();
  Object  position = getGPSPosition();
  if (position == null || isInternalGPSOff && isExternalGPSOff) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "" + getGPSEstimatedAccuracy();
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Accuracy", accuracy);

  saveArchEnt(currentUuid, archEntType, geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      print("[takePoint()] Added geometry: " + geolist);
      fillInGPS(tabgroup);
    }
  });
}

/* Sets the value of GPS views for the given tab path. */
void fillInGPS(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)) {
    return;
  }

  String query = "SELECT x(transform(geospatialcolumn,                4326)) as longtiude, " +
                 "       y(transform(geospatialcolumn,                4326)) as latitude, " +
                 "       x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, " +
                 "       y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                 "  FROM latestnondeletedarchent, vocabulary " +
                 " WHERE uuid = '" + currentUuid + "';";

  fetchOne(query, new FetchCallback() {
    onFetch(result) {
      print("[fillInGPS()] Fetched DB transformed geometry: " + result);
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude" , result.get(0));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude"  , result.get(1));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting"   , result.get(2));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing"  , result.get(3));
    }
  });
}

void clearGpsInTabGroup(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String tabRef = tabgroupToTabRef.get(tabgroup);
  if (isNull(tabRef)) return;

  clearGpsInTab(tabRef);
}

void clearGpsInTab(String tabRef) {
  setFieldValue(tabRef + "/Accuracy"  , "");
  setFieldValue(tabRef + "/Latitude"  , "");
  setFieldValue(tabRef + "/Longitude" , "");
  setFieldValue(tabRef + "/Easting"   , "");
  setFieldValue(tabRef + "/Northing"  , "");
}

/*************** LOADING AND CREATION OF RECORDS FROM QR CODES ****************/
void bindQrScanning(String refButton, String refField) {
  String event = "click";

  String stmt = fun2str("scanRecordFromQrCode", refField);

  addOnEvent(refButton, event, stmt);
}

void scanRecordFromQrCode(String ref) {
  String callback = fun2str("loadOrCreateEntityFromScannedAttrib", ref);
  scanCode(callback);
}

void loadOrCreateEntityFromScannedAttrib(String ref) {
  String attrName = getAttributeName(ref);
  String attribVal  = getLastScanContents();

  String q = "";
  q += "SELECT uuid ";
  q += "  FROM latestnondeletedaentvalue ";
  q += "  JOIN latestnondeletedarchent USING (uuid) ";
  q += "  JOIN attributekey            USING (attributeid) ";
  q += " WHERE attributename = '{attrName}' ";
  q += "   AND measure       = '{attribVal}' ";
  q  = replaceFirst(q, "{attrName}",  attrName);
  q  = replaceFirst(q, "{attribVal}", attribVal );

  FetchCallback loadOrCreateEntity = new FetchCallback() {
    onFetch(result) {
      if (isNull(result) || result.size() == 0) {
        createRecordFromScannedAttrib(ref);
      } else {
        String uuid = result.get(0).get(0);
        loadEntityFrom(uuid);
      }
    }
  };

  fetchAll(q, loadOrCreateEntity);
}

void initScannedAttrib(String ref) {
  String oldCode = getFieldValue(ref);
  String newCode = getLastScanContents();

  if (isNull(oldCode))
    setFieldValue(ref, newCode);
}

void createRecordFromScannedAttrib(String ref) {
  String tabGroup = getTabGroupRef(ref);
  newRecord(tabGroup);

  initScannedAttrib(ref);
}



/******************************************************************************/
/*                       AUTONUMBERING HELPER FUNCTIONS                       */
/******************************************************************************/
/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
Integer incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = Integer.parseInt(val) + 1;
  setFieldValue(ref, inc);
  insertIntoLocalSettings(ref, inc.toString());

  return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
Integer incField(String ref) {
  return incField(ref, 1);
}

List getStartingIdPaths() {
  List l = new ArrayList();
  l.add("Control/Next_IDs/Next_Context_Context_ID");
  l.add("Control/Next_IDs/Next_Context_Group_ID");
  l.add("Control/Next_IDs/Next_FCN_ID");
  return l;
}

void loadStartingId(String ref) {
  // If there's already a value in the field, we don't need to load one.
  String val = getFieldValue(ref);
  if (!isNull(val)) {
    return;
  }

  // Load a value into the field. Set it to 1 if no value has been previously
  // saved.
  String idQ = "SELECT value FROM localSettings WHERE key = '" + ref + "';";
  fetchOne(idQ, new FetchCallback() {
    onFetch(result) {
      if (isNull(result)) setFieldValue(ref, "1"          );
      else                setFieldValue(ref, result.get(0));
    }
  });
}

loadStartingIds() {
  List l = getStartingIdPaths();

  for (ref : l) {
    loadStartingId(ref);
  }
}

addOnEvent("Control", "show", "loadStartingIds()");

/*
 * Sets bindings to save autonum'd fields whenever they're blurred.
 */
for (ref : getStartingIdPaths()) {
  onFocus(ref, null, "insertIntoLocalSettings(\"" + ref + "\", getFieldValue(\"" + ref + "\"));");
}

void incAutoNum(String destPath) {
  Map destToSource = new HashMap();
  destToSource.put("Context/General/Context_Context_ID", "Control/Next_IDs/Next_Context_Context_ID");
  destToSource.put("Context_Group/Gen/Context_Group_ID", "Control/Next_IDs/Next_Context_Group_ID");
  destToSource.put("FCN/General/FCN_ID", "Control/Next_IDs/Next_FCN_ID");

  String sourcePath = destToSource.get(destPath);
  String destVal    = getFieldValue(sourcePath);
  setFieldValue(destPath, destVal);
  incField(sourcePath);
}

/******************************************************************************/
/*                POPULATION OF ENTITY AND CHILD ENTITY LISTS                 */
/******************************************************************************/
/*
 * `viewType`   the type of GUI element to be populated. It can either equal
 *              "DropDown" or "List".
 * `path`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
void populateMenuWithEntities (
  String viewType,
  String path,
  String parentUuid,
  String entType,
  String relType
) {
  String getChildEntitiesQ = "" +
    "SELECT childuuid, response "+
    "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid) " +
    "  JOIN createdmodifiedatby USING (uuid) " +
    " WHERE relationshipid IN (SELECT relationshipid  " +
    "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid) " +
    "                           WHERE relntypename = '"+relType+"') " +
    "   AND parentuuid = '" + parentUuid + "' " +
    "   AND (childaenttypename = '"+entType+"' OR '"+entType+"' = '') " +
    " ORDER BY createdat DESC ";

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY response ";

  String q = null;
  if (relType.equals("")) {
    q = getEntitiesQ;
  } else {
    q = getChildEntitiesQ;
  }

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(path, result, true);
    }
  };

  switch (viewType) {
    case "DropDown":
      fetchAll(q, cbPopulateDropDown);
      break;
    case "List":
      q += " LIMIT ? OFFSET ? ";
      populateCursorList(path, q, 25);
      break;
    default:
      Log.e("populateMenuWithEntities ", "Unexpected type '" + viewType + "'");
  }
}

void populateEntityListsInTabGroup(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  for (m : ENTITY_MENUS) {
    String path         = m[1];
    String menuTabGroup = getTabGroupRef(path);
    String functionCall = getEntityMenuPopulationFunction(m);

    if (menuTabGroup.equals(tabGroup))
      execute(functionCall);
  }
}

/* Populates each list containing records whose archent type is the same as that
 * of `tabGroup`.
 */
void populateEntityListsOfArchEnt(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  String archEntTypeToPopulate = getArchEntType(tabGroup);

  for (m : ENTITY_MENUS) {
    String archEntType  = m[3];
    String functionCall = getEntityMenuPopulationFunction(m);

    if (archEntType.equals(archEntTypeToPopulate))
      execute(functionCall);
  }
}

String getEntityMenuPopulationFunction(String[] menuDescriptor) {
  String viewType       = menuDescriptor[0];
  String path           = menuDescriptor[1];
  String parentUuidCall = menuDescriptor[2];
  String entType        = menuDescriptor[3];
  String relType        = menuDescriptor[4];

  String functionCall = "";
  functionCall += "populateMenuWithEntities(";
  functionCall += "\"" + viewType       + "\"";
  functionCall += ", ";
  functionCall += "\"" + path           + "\"";
  functionCall += ", ";
  functionCall +=        parentUuidCall       ;
  functionCall += ", ";
  functionCall += "\"" + entType        + "\"";
  functionCall += ", ";
  functionCall += "\"" + relType        + "\"";
  functionCall += ")";

  return functionCall;
}

ENTITY_MENUS = new ArrayList();
ENTITY_MENUS.add(new String[] {
    "List",
    "Control/Contexts/Choose_an_Existing_Site",
    "getUuid(\"Control\")",
    "Site",
    ""
});
ENTITY_MENUS.add(new String[] {
    "List",
    "Site/Site/List_of_Existing_Trenches",
    "getUuid(\"Site\")",
    "Trench",
    "Site - Trench"
});
ENTITY_MENUS.add(new String[] {
    "DropDown",
    "Trench/Trench/Attached_Trench_Files",
    "getUuid(\"Trench\")",
    "Trench Files",
    "Trench - Trench Files"
});
ENTITY_MENUS.add(new String[] {
    "List",
    "Trench/Loci/List_of_Existing_Loci",
    "getUuid(\"Trench\")",
    "Context",
    "Trench - Context"
});
ENTITY_MENUS.add(new String[] {
    "List",
    "Trench/Strata_Features/List_of_Existing_Strata_Features",
    "getUuid(\"Trench\")",
    "Context Group",
    "Trench - Context Group"
});
ENTITY_MENUS.add(new String[] {
    "List",
    "Trench/FCNs/List_of_Existing_FCNs",
    "getUuid(\"Trench\")",
    "FCN",
    "Trench - FCN"
});
ENTITY_MENUS.add(new String[] {
    "List",
    "Trench/Diaries/List_of_Existing_Diaries",
    "getUuid(\"Trench\")",
    "Diary",
    "Trench - Diary"
});
ENTITY_MENUS.add(new String[] {
    "List",
    "Trench/Legacies/List_of_Existing_Legacies",
    "getUuid(\"Trench\")",
    "Legacy",
    "Trench - Legacy"
});
ENTITY_MENUS.add(new String[] {
    "DropDown",
    "Context/Deposit/Munsel_Colors",
    "getUuid(\"Context\")",
    "Soil Munsel Color",
    "Context - Soil Munsel Color"
});
ENTITY_MENUS.add(new String[] {
    "DropDown",
    "Context/Deposit/Associated_Matrices",
    "getUuid(\"Context\")",
    "Matrix",
    "Context - Matrix"
});
ENTITY_MENUS.add(new String[] {
    "List",
    "Context/FCN/List_of_Related_FCNs",
    "getUuid(\"Context\")",
    "FCN",
    "Context - FCN"
});
ENTITY_MENUS.add(new String[] {
    "DropDown",
    "Context/Add/Select_a_Photograph_Log",
    "getUuid(\"Context\")",
    "Photograph Log",
    "Context - Photograph Log"
});
ENTITY_MENUS.add(new String[] {
    "DropDown",
    "Context_Group/Add/Select_a_Photograph_Log",
    "getUuid(\"Context_Group\")",
    "Photograph Log",
    "Context Group - Photograph Log"
});
for (m : ENTITY_MENUS) {
  String path         = m[1];
  String functionCall = getEntityMenuPopulationFunction(m);

  execute(functionCall);
}

addOnEvent("Control/Contexts/Choose_an_Existing_Site", "click", "loadEntity()");
addOnEvent("Site/Site/List_of_Existing_Trenches", "click", "loadEntity()");
addOnEvent("Trench/Trench/Attached_Trench_Files", "click", "loadEntity(true)");
addOnEvent("Trench/Loci/List_of_Existing_Loci", "click", "loadEntity()");
addOnEvent("Trench/Strata_Features/List_of_Existing_Strata_Features", "click", "loadEntity()");
addOnEvent("Trench/FCNs/List_of_Existing_FCNs", "click", "loadEntity()");
addOnEvent("Trench/Diaries/List_of_Existing_Diaries", "click", "loadEntity()");
addOnEvent("Trench/Legacies/List_of_Existing_Legacies", "click", "loadEntity()");
addOnEvent("Context/Deposit/Munsel_Colors", "click", "loadEntity(true)");
addOnEvent("Context/Deposit/Associated_Matrices", "click", "loadEntity(true)");
addOnEvent("Context/FCN/List_of_Related_FCNs", "click", "loadEntity()");
addOnEvent("Context/Add/Select_a_Photograph_Log", "click", "loadEntity(true)");
addOnEvent("Context_Group/Add/Select_a_Photograph_Log", "click", "loadEntity(true)");
/******************************************************************************/
/*                             HANDWRITTEN LOGIC                              */
/******************************************************************************/

/*********************************** SHARED ***********************************/
String WEB_REL_NONE = "<i>None</i>";

contextIdentifer = "";

void populateSquare(String ref) {
  String q = "";
  q += " SELECT DISTINCT measure, measure";
  q += " FROM            latestnondeletedaentvalue";
  q += " JOIN            attributekey USING (attributeid)";
  q += " WHERE           attributename = 'Square'";
  q += " AND             measure IS NOT NULL";
  q += " ORDER BY        measure;";

  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      populateDropDown(ref, result);
    }
  };

  fetchAll(q, populate);
}

void setFieldToIdentifier(String identiferType, String lotRef) {
  String uuid = getUuid(identiferType);

  if (isNull(uuid)) {
    populateWebViewHtml(lotRef, "&nbsp;");
    return;
  }

  String q = "";
  q += "SELECT uuid, response ";
  q += "FROM latestnondeletedarchentformattedidentifiers ";
  q += "WHERE uuid = '%s' ";
  q  = replaceFirst(q, "%s", uuid);

  cb = new FetchCallback() {
    onFetch(result) {
      contextIdentifer  = result.get(1);

      populateWebViewHtml(lotRef, contextIdentifer);
    }
  };

  fetchOne(q, cb);
}

void populateLotLabel(String lotRef) {
  identiferType = "Context";
  setFieldToIdentifier(identiferType, lotRef);
}
/******************************* RELATIONSHIPS ********************************/
/* Variables and functions shared by entity-specfic code fo relating          */
/* entities.                                                                  */
/******************************************************************************/
addOnEvent("Context",                    "show", "onDisplayParent()");
addOnEvent("Relationship",               "show", "onDisplayRelationship()");
addOnEvent("Context_Group",              "show", "CGonDisplayParent()");
addOnEvent("Context_Group_Relationship", "show", "CGonDisplayRelationship()");

String WEB_REL_DESC_FMT      = "%s <u>&nbsp;%s&nbsp;</u> <u>&nbsp;%s&nbsp;</u>";
String WEB_REL_DESC_FILL     = "?";
String WEB_REL_BLANK         = "&nbsp;";

String selectedRelId         = null;
String selectedRelIdentifier = null;
String selectedChildUuid     = null;

String proposedChildUuid       = null;
String proposedChildIdentifier = null;

String displayedTabGroup     = null;

void onDisplayParent()            {displayedTabGroup = "Context";}
void onDisplayRelationship()      {displayedTabGroup = "Relationship";}
boolean isDisplayedParent()       {return displayedTabGroup.equals("Context");}
boolean isDisplayedRelationship() {return displayedTabGroup.equals("Relationship");}

void CGonDisplayParent()            {displayedTabGroup = "Context_Group";}
void CGonDisplayRelationship()      {displayedTabGroup = "Context_Group_Relationship";}
boolean CGisDisplayedParent()       {return displayedTabGroup.equals("Context_Group");}
boolean CGisDisplayedRelationship() {return displayedTabGroup.equals("Context_Group_Relationship");}

// Depends on the following globals:
//   - selectedRelId
//   - userid        (Defined by autogen)
void deleteRelationship() {
  if (isNull(selectedRelId)) {
    showToast("No relationship selected");
    return;
  }

  String q = "";
  q += " INSERT INTO aentreln (uuid, relationshipid, deleted, participatesverb, userid)";
  q += " SELECT uuid, relationshipid, 'true', participatesverb, '"+userid+"'";
  q += " FROM latestnondeletedaentreln";
  q += " WHERE relationshipid = '"+selectedRelId+"'";

  DeleteCallback cb = new DeleteCallback() {
    onDelete(uuid) {
      deleteRelationshipSuceeded();
    }
  };

  fetchOne(q);
  deleteRel(selectedRelId, cb);

  selectedRelId         = null;
  selectedRelIdentifier = null;
}

void deleteRelationshipSuceeded() {
  String refSelectedRelRel    = "Relationship/Relationships/Selected_Relationship";
  String refSelectedRelParent = "Context/Relationships/Selected_Relationship";
  if (isDisplayedParent()) {
    populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
    populateExistingRelationships();
  }
  if (isDisplayedRelationship()) {
    populateWebViewHtml(refSelectedRelRel,    WEB_REL_NONE);
    searchRelationship();
  }

  String CGrefSelectedRelRel    = "Context_Group_Relationship/Relationships/Selected_Relationship";
  String CGrefSelectedRelParent = "Context_Group/Context_Group_Contexts/Selected_Relationship";
  if (CGisDisplayedParent()) {
    populateWebViewHtml(CGrefSelectedRelParent, WEB_REL_NONE);
    CGpopulateExistingRelationships();
  }
  if (CGisDisplayedRelationship()) {
    populateWebViewHtml(CGrefSelectedRelRel,    WEB_REL_NONE);
    CGsearchRelationship();
  }
}

String getSelectedRelationshipComponent(String ref, String component) {
  String   val       = getFieldValue(ref);
  String[] arguments = null;
  if (val == null)
      return null;
  else
      arguments = val.split("~!~");

  String   relationshipName = arguments[0];
  String   parentRole       = arguments[1];
  String   childRole        = arguments[2];

  component = component.toLowerCase();
  if      (component.equals("name"))   return relationshipName;
  else if (component.equals("parent")) return parentRole;
  else if (component.equals("child"))  return childRole;
  else                                 return null;
}

void loadRelatedEntity() {
  if (isNull(selectedChildUuid)) {
    showToast("No relationship selected");
    return;
  }
  loadEntityFrom(selectedChildUuid);
}

/**************************** USER TAB VALIDATION *****************************/
/* The autogen defines its own `onClickUserLogin` function. This is           */
/* overridden using @POSTPROC.                                                */
/******************************************************************************/

void onClickUserLogin () {
  String refUsers      = userMenuPath; // Defined by autogen
  String refDeviceCode = "User/User_List/Device_Code";

  String vocabIdUsers      = getFieldValue(refUsers);
  String vocabIdDeviceCode = getFieldValue(refDeviceCode);

  Boolean isSelectedUsers      = !isNull(vocabIdUsers);
  Boolean isSelectedDeviceCode = !isNull(vocabIdDeviceCode);

  if (!isSelectedUsers)      { noUsersSelected();      return; }
  if (!isSelectedDeviceCode) { noDeviceCodeSelected(); return; }

  newTab("Control", true);
}

void noUsersSelected() {
  String msgHead = "No User selected";
  String msgBody = "A User must be selected in order to log in.";
  showWarning(msgHead, msgBody);
}

void noDeviceCodeSelected() {
  msgHead = "No {Device_Code} Selected";
  msgBody = "A {Device_Code} must be selected in order to log in.";
  showWarning(msgHead, msgBody);
}
/******************************* RELATIONSHIPS ********************************/
/* Context-to-Context relationships.                                          */
/*                                                                            */
/* Uses functions from logic/relationships-shared.bsh                         */
/*                                                                            */
/* Modifies onClickContextCreateRelationshipstoThisContext using @POSTPROC.   */
/******************************************************************************/
//////////////////// FUNCTIONS AFFECTING CONTEXT TAB GROUP /////////////////////
addOnEvent("Context",                                    "show",  "initParentRelationshipGlobals()");
addOnEvent("Context",                                    "show",  "populateExistingRelationships()");
addOnEvent("Context/Relationships/Load_Related_Context", "click", "loadRelatedEntity()");

addOnEvent("Context/Relationships/Existing_Relationships_to_This_Context", "click", "selectRelationship()");
addOnEvent("Context/Relationships/Delete_Relationship",                    "click", "deleteRelationship()");

void initParentRelationshipGlobals() {
  String refSelectedRelParent = "Context/Relationships/Selected_Relationship";

  selectedChildUuid     = null;
  selectedRelId         = null;
  selectedRelIdentifier = null;

  populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
}

void populateExistingRelationships(){
  String tabGroup    = "Context";
  String currentUuid = getUuid(tabGroup);
  String refExistingRelationships = "Context/Relationships/Existing_Relationships_to_This_Context";

  String q = getRelatedChildQuery(currentUuid);

  populateCursorList(refExistingRelationships, q, 25);
  refreshTabgroupCSS(tabGroup);
}

void selectRelationship() {
  String refSelectedRelParent = "Context/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];
  selectedChildUuid     = arguments[3];

  populateWebViewHtml(refSelectedRelParent, selectedRelIdentifier);
}

////////////////// FUNCTIONS AFFECTING RELATIONSHIP TAB GROUP //////////////////
addOnEvent("Relationship",                                      "show",  "initRelationshipRelationshipGlobals()");
addOnEvent("Relationship/Relationships/Add_Relationship",       "click", "addRelationship()");
addOnEvent("Relationship/Relationships/Delete_Relationship",    "click", "deleteRelationship()");
addOnEvent("Relationship/Relationships/Existing_Relationships", "click", "selectExistingRelationship()");
addOnEvent("Relationship/Relationships/Relationship_Type",      "click", "populateProposedRelationship()");
addOnEvent("Relationship/Relationships/Search",                 "click", "populateProposedRelationship()");
addOnEvent("Relationship/Relationships/Search",                 "click", "searchRelationship()");
addOnEvent("Relationship/Relationships/Unrelated_Contexts",     "click", "selectUnrelatedEntity()");

void initRelationshipRelationshipGlobals() {
  proposedChildUuid       = null;
  selectedRelId           = null;
  proposedChildIdentifier = null;
  selectedRelIdentifier   = null;

  populateParentIdentiferRelationships();
  populateRelationshipType();
  populateProposedRelationship();
  clearSearch();
}

void populateRelationshipType() {
  refRelationshipType = "Relationship/Relationships/Relationship_Type";

  String q = "";
  q += "SELECT relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid ";
  q += "  FROM relntype ";
  q += " WHERE relntypename not like '%-%' ";
  q += " UNION ";
  q += " SELECT relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid ";
  q += "  FROM relntype ";
  q += " WHERE relntypename not like '%-%' ";
  q += " ORDER BY relntypeid, name";

  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      populateDropDown(refRelationshipType, result);
    }
  };

  fetchAll(q, populate);
}

void populateProposedRelationship() {
  String refProposedRel = "Relationship/Relationships/Proposed_Relationship";
  String refRelType     = "Relationship/Relationships/Relationship_Type";

  String identifierFrom;
  String relationship;
  String identifierTo;

  identifierFrom = contextIdentifer; // Defined in logic/shared.bsh
  relationship   = getSelectedRelationshipComponent(refRelType, "parent");
  identifierTo   = proposedChildIdentifier;

  if (isNull(identifierFrom)) identifierFrom = WEB_REL_DESC_FILL;
  if (isNull(relationship  )) relationship   = WEB_REL_DESC_FILL;
  if (isNull(identifierTo  )) identifierTo   = WEB_REL_DESC_FILL;

  String webviewHtml = WEB_REL_DESC_FMT;
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierFrom);
  webviewHtml = replaceFirst(webviewHtml, "%s", relationship  );
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierTo  );

  populateWebViewHtml(refProposedRel, webviewHtml);
}

void searchRelationship() {
  String parentTabGroup = "Context";
  String parentUuid     = getUuid(parentTabGroup);

  String tabGroup     = "Relationship";
  String refUnrelated = "Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Relationship/Relationships/Existing_Relationships";
  String refRelType   = "Relationship/Relationships/Relationship_Type";
  String refAreaCode  = "Relationship/Relationships/AreaCode";
  String refContextId = "Relationship/Relationships/Context_ID";

  String areaCode   = getFieldValue(refAreaCode);
  String contextId  = getFieldValue(refContextId);
  String parentRole = getSelectedRelationshipComponent(refRelType, "parent");
  String unrelatedQ = "";
  String relatedQ   = "";

  if (isNull(areaCode)) {
    msgHead  = "Trench ID required";
    msgBody  = "Searching requires that the Trench ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(contextId)) {
    msgHead  = "Locus ID required";
    msgBody  = "Searching requires that the Locus ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }

  unrelatedQ += " SELECT 'unrelated' || char(0) || uuid || char(0) || response, response";
  unrelatedQ += "   FROM latestNonDeletedArchEntFormattedIdentifiers";
  unrelatedQ += "  WHERE uuid IN (";
  unrelatedQ += "         SELECT uuid";
  unrelatedQ += "           FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid)";
  unrelatedQ += "          WHERE attributename IN ('Context AreaCode', 'Legacy AreaCode')";
  unrelatedQ += "            AND measure = '{Context_AreaCode}'";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename IN ('Context Context ID', 'Legacy Context ID')";
  unrelatedQ += "                    AND measure = '{Context_Context_ID}')";
  unrelatedQ += "            AND uuid NOT IN (";
  unrelatedQ += "                 SELECT childuuid";
  unrelatedQ += "                   FROM parentchild";
  unrelatedQ += "                  WHERE parentuuid = '{parentUuid}'";
  unrelatedQ += "                    AND parentparticipatesverb = '{parentRole}')";
  unrelatedQ += "            AND uuid != '{parentUuid}')";
  unrelatedQ += "    AND aenttypename IN ('Context', 'Legacy')";
  unrelatedQ += " ORDER BY response";
  unrelatedQ += " LIMIT ? OFFSET ?";
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_AreaCode}",   areaCode  );
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_Context_ID}", contextId );
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentRole}",         parentRole);

  relatedQ += getRelatedChildQuery(parentUuid);

  populateCursorList(refUnrelated, unrelatedQ, 25);
  populateCursorList(refRelated,   relatedQ,   25);

  proposedChildUuid = null; proposedChildIdentifier = null;
  populateProposedRelationship();
}

void clearSearch() {
  String refUnrelated = "Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Relationship/Relationships/Existing_Relationships";

  String q = "SELECT '' WHERE 0 LIMIT ? OFFSET ?";
  populateCursorList(refUnrelated, q, 25);
  populateCursorList(refRelated,   q, 25);
}

void selectUnrelatedEntity() {
  String val = getListItemValue();
  if (isNull(val)) return;
  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("unrelated")) return;

  proposedChildUuid       = arguments[1];
  proposedChildIdentifier = arguments[2];

  populateProposedRelationship();
}

void addRelationship() {
  String parentTabGroup = "Context";
  String refRelType     = "Relationship/Relationships/Relationship_Type";

  String relName    = getSelectedRelationshipComponent(refRelType, "name");
  String parentUuid = getUuid(parentTabGroup);
  String childUuid  = proposedChildUuid;
  String parentRole = getSelectedRelationshipComponent(refRelType, "parent");
  String childRole  = getSelectedRelationshipComponent(refRelType, "child");
  String callback   = "addRelationshipSucceeded()";

  if (isNull(parentUuid)) {
    String msgHead = "Logic Error";
    String msgBody = "Something happened which never should.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(childUuid)) {
    showToast("No Locus selected");
    return;
  }

  saveEntitiesToHierRel(
      relName,
      parentUuid, childUuid,
      parentRole, childRole,
      callback
  );

  proposedChildUuid       = null;
  proposedChildIdentifier = null;
}

void addRelationshipSucceeded() {
  String refProposedRel = "Relationship/Relationships/Proposed_Relationship";

  populateWebViewHtml(refProposedRel, WEB_REL_BLANK);

  searchRelationship();
}

void selectExistingRelationship() {
  String refSelectedRelRel = "Relationship/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];

  populateWebViewHtml(refSelectedRelRel, selectedRelIdentifier);
}

void populateParentIdentiferRelationships() {
  String lotRef = "Relationship/Relationships/Parent_Identifier";
  populateLotLabel(lotRef); // Defined in logic/shared.bsh
}

String getRelatedChildQuery(String parentUuid) {
  // `contextIdentifer` is defined in logic/shared.bsh
  String parentIdentifier = contextIdentifer;

  String relatedQ = "";
  relatedQ += "SELECT 'related' || char(0) || relationshipid || char(0) || '"+parentIdentifier+" ' || parentparticipatesverb ||' '|| response || char(0) || childuuid, '"+parentIdentifier+"'||' '||parentparticipatesverb||' '||response";
  relatedQ += "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) ";
  relatedQ += "  JOIN createdmodifiedatby USING (uuid) ";
  relatedQ += " WHERE relationshipid IN (SELECT relationshipid  ";
  relatedQ += "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  ";
  relatedQ += "                           WHERE relntypename NOT like '% - %') ";
  relatedQ += "   and parentuuid = '"+parentUuid+"' ";
  relatedQ += " ORDER BY createdat desc ";
  relatedQ += " LIMIT ? OFFSET ? ";
  return relatedQ;
}
/******************************* RELATIONSHIPS ********************************/
/* Context Group to Context relationships.                                    */
/*                                                                            */
/* Uses functions and globals from logic/relationships-shared.bsh             */
/*                                                                            */
/* Modifies onClickContextGroupCreateRelationshipstoThisContextGroup using    */
/* @POSTPROC.                                                                 */
/******************************************************************************/
//////////////// FUNCTIONS AFFECTING "CONTEXT GROUP" TAB GROUP /////////////////
addOnEvent("Context_Group",                                    "show",  "CGinitParentRelationshipGlobals()");
addOnEvent("Context_Group",                                    "show",  "CGpopulateExistingRelationships()");
addOnEvent("Context_Group/Context_Group_Contexts/Load_Related_Context", "click", "loadRelatedEntity()");

addOnEvent("Context_Group/Context_Group_Contexts/Existing_Relationships_to_This_Context_Group", "click", "CGSelectRelationship()");
addOnEvent("Context_Group/Context_Group_Contexts/Delete_Relationship",                    "click", "deleteRelationship()");

void CGinitParentRelationshipGlobals() {
  String refSelectedRelParent = "Context_Group/Context_Group_Contexts/Selected_Relationship";

  selectedChildUuid     = null;
  selectedRelId         = null;
  selectedRelIdentifier = null;

  populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
}

void CGpopulateExistingRelationships(){
  String tabGroup    = "Context_Group";
  String currentUuid = getUuid(tabGroup);
  String refExistingRelationships = "Context_Group/Context_Group_Contexts/Existing_Relationships_to_This_Context_Group";

  String q = getCGChildQuery(currentUuid);

  populateCursorList(refExistingRelationships, q, 25);
  refreshTabgroupCSS(tabGroup);
}

void CGSelectRelationship() {
  String refSelectedRelParent = "Context_Group/Context_Group_Contexts/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];
  selectedChildUuid     = arguments[3];

  populateWebViewHtml(refSelectedRelParent, selectedRelIdentifier);
}

////////////////// FUNCTIONS AFFECTING RELATIONSHIP TAB GROUP //////////////////
addOnEvent("Context_Group_Relationship",                                      "show",  "CGinitRelationshipRelationshipGlobals()");
addOnEvent("Context_Group_Relationship/Relationships/Add_Relationship",       "click", "CGaddRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Delete_Relationship",    "click", "deleteRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Existing_Relationships", "click", "CGselectExistingRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Search",                 "click", "CGpopulateProposedRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Search",                 "click", "CGsearchRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Unrelated_Contexts",     "click", "CGselectUnrelatedEntity()");

void CGinitRelationshipRelationshipGlobals() {
  proposedChildUuid       = null;
  selectedRelId           = null;
  proposedChildIdentifier = null;
  selectedRelIdentifier   = null;

  CGpopulateParentIdentiferRelationships();
  CGpopulateProposedRelationship();
  CGclearSearch();
}

void CGpopulateProposedRelationship() {
  String refProposedRel = "Context_Group_Relationship/Relationships/Proposed_Relationship";

  String identifierFrom;
  String relationship;
  String identifierTo;

  identifierFrom = contextIdentifer; // Defined in logic/shared.bsh
  relationship   = "includes";
  identifierTo   = proposedChildIdentifier;

  if (isNull(identifierFrom)) identifierFrom = WEB_REL_DESC_FILL;
  if (isNull(relationship  )) relationship   = WEB_REL_DESC_FILL;
  if (isNull(identifierTo  )) identifierTo   = WEB_REL_DESC_FILL;

  String webviewHtml = WEB_REL_DESC_FMT;
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierFrom);
  webviewHtml = replaceFirst(webviewHtml, "%s", relationship  );
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierTo  );

  populateWebViewHtml(refProposedRel, webviewHtml);
}

void CGsearchRelationship() {
  String parentTabGroup = "Context_Group";
  String parentUuid     = getUuid(parentTabGroup);

  String tabGroup     = "Context_Group_Relationship";
  String refUnrelated = "Context_Group_Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Context_Group_Relationship/Relationships/Existing_Relationships";
  String refAreaCode  = "Context_Group_Relationship/Relationships/AreaCode";
  String refContextId = "Context_Group_Relationship/Relationships/Context_ID";

  String areaCode   = getFieldValue(refAreaCode);
  String contextId  = getFieldValue(refContextId);
  String parentRole = "includes";
  String unrelatedQ = "";
  String relatedQ   = "";

  if (isNull(areaCode)) {
    msgHead  = "Trench ID required";
    msgBody  = "Searching requires that the Trench ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(contextId)) {
    msgHead  = "Locus ID required";
    msgBody  = "Searching requires that the Locus ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }

  unrelatedQ += " SELECT 'unrelated' || char(0) || uuid || char(0) || response, response";
  unrelatedQ += "   FROM latestNonDeletedArchEntFormattedIdentifiers";
  unrelatedQ += "  WHERE uuid IN (";
  unrelatedQ += "         SELECT uuid";
  unrelatedQ += "           FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid)";
  unrelatedQ += "          WHERE attributename = 'Context AreaCode'";
  unrelatedQ += "            AND measure = '{Context_AreaCode}'";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename IN ('Context Context ID', 'Legacy Context ID')";
  unrelatedQ += "                    AND measure = '{Context_Context_ID}')";
  unrelatedQ += "            AND uuid NOT IN (";
  unrelatedQ += "                 SELECT childuuid";
  unrelatedQ += "                   FROM parentchild";
  unrelatedQ += "                  WHERE parentuuid = '{parentUuid}'";
  unrelatedQ += "                    AND parentparticipatesverb = '{parentRole}')";
  unrelatedQ += "            AND uuid != '{parentUuid}')";
  unrelatedQ += " ORDER BY response";
  unrelatedQ += " LIMIT ? OFFSET ?";
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_AreaCode}",   areaCode  );
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_Context_ID}", contextId );
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentRole}",         parentRole);

  relatedQ += getCGChildQuery(parentUuid);

  populateCursorList(refUnrelated, unrelatedQ, 25);
  populateCursorList(refRelated,   relatedQ,   25);

  proposedChildUuid = null; proposedChildIdentifier = null;
  CGpopulateProposedRelationship();
}

void CGclearSearch() {
  String refUnrelated = "Context_Group_Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Context_Group_Relationship/Relationships/Existing_Relationships";

  String q = "SELECT '' WHERE 0 LIMIT ? OFFSET ?";
  populateCursorList(refUnrelated, q, 25);
  populateCursorList(refRelated,   q, 25);
}

void CGselectUnrelatedEntity() {
  String val = getListItemValue();
  if (isNull(val)) return;
  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("unrelated")) return;

  proposedChildUuid       = arguments[1];
  proposedChildIdentifier = arguments[2];

  CGpopulateProposedRelationship();
}

void CGaddRelationship() {
  String parentTabGroup = "Context_Group";

  String relName    = "Context Group - Context";
  String parentUuid = getUuid(parentTabGroup);
  String childUuid  = proposedChildUuid;
  String parentRole = "includes";
  String childRole  = "is included by";
  String callback   = "CGaddRelationshipSucceeded()";

  if (isNull(parentUuid)) {
    String msgHead = "Logic Error";
    String msgBody = "Something happened which never should.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(childUuid)) {
    showToast("No Context selected");
    return;
  }

  saveEntitiesToHierRel(
      relName,
      parentUuid, childUuid,
      parentRole, childRole,
      callback
  );

  proposedChildUuid       = null;
  proposedChildIdentifier = null;
}

void CGaddRelationshipSucceeded() {
  String refProposedRel = "Context_Group_Relationship/Relationships/Proposed_Relationship";

  populateWebViewHtml(refProposedRel, WEB_REL_BLANK);

  CGsearchRelationship();
}

void CGselectExistingRelationship() {
  String refSelectedRelRel = "Context_Group_Relationship/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];

  populateWebViewHtml(refSelectedRelRel, selectedRelIdentifier);
}

void CGpopulateParentIdentiferRelationships() {
  String lotRef = "Context_Group_Relationship/Relationships/Parent_Identifier";
  setFieldToIdentifier("Context_Group", lotRef);
}

String getCGChildQuery(String parentUuid) {
  // `contextIdentifer` is defined in logic/shared.bsh
  String parentIdentifier = contextIdentifer;
  String relntypename     = "Context Group - Context";

  String relatedQ = "";
  relatedQ += "SELECT 'related' || char(0) || relationshipid || char(0) || '"+parentIdentifier+" ' || parentparticipatesverb ||' '|| response || char(0) || childuuid, '"+parentIdentifier+"'||' '||parentparticipatesverb||' '||response";
  relatedQ += "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) ";
  relatedQ += "  JOIN createdmodifiedatby USING (uuid) ";
  relatedQ += " WHERE relationshipid IN (SELECT relationshipid  ";
  relatedQ += "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  ";
  relatedQ += "                           WHERE relntypename = '"+relntypename+"') ";
  relatedQ += "   and parentuuid = '"+parentUuid+"' ";
  relatedQ += " ORDER BY createdat desc ";
  relatedQ += " LIMIT ? OFFSET ? ";
  return relatedQ;
}
/***************************** DYNAMIC UI HELPERS *****************************/
void hideView(String refView) {
  String uuid       = getUuid(getTabGroupRef(refView));
  String attribName = getAttributeName(refView);
  String valView;

  if (hasView(refView)) {
    valView = getFieldValue(refView);
    removeView(refView);
  }

  if (!isNull(valView)) {
    // Flag Feature Type as `deleted`.
    q  = " INSERT INTO aentvalue (UUID, UserID, AttributeID, Deleted)";
    q += " SELECT '{uuid}', {userid}, attributeid, 1";
    q += " FROM  attributekey";
    q += " WHERE attributename = '{attributename}'";
    q  = replaceFirst(q, "{uuid}", uuid);
    q  = replaceFirst(q, "{userid}", userid);
    q  = replaceFirst(q, "{attributename}", attribName);

    fetchOne(q);
  }
}
/************************ DYNAMIC UI - OPEN/CLOSE SITE ************************/
/* There are two cases to handle:                                             */
/*   (a) When a record is newly created.                                      */
/*   (b) When a record has been loaded.                                       */
/*                                                                            */
/* Case (a) is handled by events which trigger a UI update.                   */
/*                                                                            */
/* Case (b) is handled by a callback to `showTabGroup`. This is implemented   */
/* by overwriting the auto-generated record loading function using @POSTPROC. */
/******************************************************************************/
addOnEvent("Context",                                      "show",  "openContextTabs()");
addOnEvent("Context",                                      "fetch", "openContextTabs(true)");
addOnEvent("Context/General/Fill_in_Context_Type_Details", "click", "openContextTabs()");

void openContextTabs() {
  openContextTabs(false);
}

void openContextTabs(Boolean showGeneralInformationTab){
  String refCut = "Context/Cut";
  String refDep = "Context/Deposit";
  String refSke = "Context/Skeleton";
  String refStr = "Context/Structure";
  String refGen = "Context/General";

  String refCtxtType = "Context/General/Context_Type";
  String vocabName   = getMenuValue(refCtxtType);

  if (vocabName == null)
    vocabName = "";

  if (vocabName.equals("{Deposit}") || vocabName.equals("{Natural}")){
    cancelTab(refCut, false);
    cancelTab(refStr, false);
    cancelTab(refSke, false);
    showTab  (refDep);
  } else if (vocabName.equals("{Cut}")){
    cancelTab(refDep, false);
    cancelTab(refStr, false);
    cancelTab(refSke, false);
    showTab  (refCut);
  } else if (vocabName.equals("{Construction}")){
    cancelTab(refDep, false);
    cancelTab(refCut, false);
    cancelTab(refSke, false);
    showTab  (refStr);
  } else if (vocabName.equals("{Skeleton}")){
    cancelTab(refDep, false);
    cancelTab(refCut, false);
    cancelTab(refStr, false);
    showTab  (refSke);
  } else {
    cancelTab(refCut, false);
    cancelTab(refDep, false);
    cancelTab(refStr, false);
    cancelTab(refSke, false);
  }

  if(showGeneralInformationTab)
    showTab(refGen);
}
/************************* DYNAMIC UI - CONTEXT GROUP *************************/
// Prefetch this vocab seeing as it will be dynamically loaded multiple times
// throughout the module's runtime.
FEATURE_TYPE_VOCAB = new ArrayList();
fetchVocab("Feature Type", FEATURE_TYPE_VOCAB);

void updateContextGroupFields() {
  String ref       = "Context_Group/Gen/Record_Type";
  String vocabName = getMenuValue(ref);
  String STRATUM   = "{Stratum}";
  String FEATURE   = "{Feature}";

  if (isNull(vocabName)) {
    setMenuValue(ref, FEATURE);
    updateContextGroupToFeature();
    return;
  }

  if (vocabName.equals(STRATUM)) updateContextGroupToStratum();
  if (vocabName.equals(FEATURE)) updateContextGroupToFeature();
}

void updateContextGroupToStratum() {
  hideContextGroupPrefix();
  hideContextGroupType();
  showContextGroupParens();
}

void updateContextGroupToFeature() {
  showContextGroupPrefix();
  showContextGroupType();
  hideContextGroupParens();
}

void hideContextGroupType() {
  hideView("Context_Group/Gen/Feature_Type");
}

void hideContextGroupPrefix() {
  hideView("Context_Group/Gen/Feature_Prefix");
}

void hideContextGroupParens() {
  setFieldValue("Context_Group/Vars/L_Paren", "");
  setFieldValue("Context_Group/Vars/R_Paren", "");
}

void showContextGroupType() {
  String refView  = "Context_Group/Gen/Feature_Type";
  String refGroup = "Context_Group/Gen/Feature_Type_Group";

  if (hasView(refView)) return;

  String label      = guessArch16nVal (refView);
  String attribName = getAttributeName(refView);

  // Create view
  FormInputDef viewDef = createViewDef();
  viewDef.createDropDown      ();
  viewDef.setLabel            (label);
  viewDef.setAttributeName    (attribName);
  viewDef.setAttributeType    ("vocab");
  viewDef.setAnnotationEnabled(true);
  viewDef.setCertaintyEnabled (true);
  viewDef.setInfoEnabled      (true);

  createView(refView, viewDef, refGroup);

  // Populate view
  Boolean hasNull = true;
  populateDropDown(refView, FEATURE_TYPE_VOCAB, hasNull);
}

void showContextGroupPrefix() {
  String refView  = "Context_Group/Gen/Feature_Prefix";
  String refGroup = "Context_Group/Gen/Feature_Prefix_Group";

  if (hasView(refView)) return;

  String label      = guessArch16nVal (refView);
  String attribName = getAttributeName(refView);

  // Create view
  FormInputDef viewDef = createViewDef();
  viewDef.createTextField     ();
  viewDef.setLabel            (label);
  viewDef.setAttributeName    (attribName);
  viewDef.setAttributeType    ("measure");
  viewDef.setAnnotationEnabled(true);
  viewDef.setCertaintyEnabled (true);
  viewDef.setInfoEnabled      (true);
  viewDef.setStyleCss         ("required");

  createView(refView, viewDef, refGroup);
}

void showContextGroupParens() {
  setFieldValue("Context_Group/Vars/L_Paren", "(");
  setFieldValue("Context_Group/Vars/R_Paren", ")");
}

addOnEvent("Context_Group/Gen/Record_Type", "click", "updateContextGroupFields()");
addOnEvent("Context_Group", "create",   "updateContextGroupFields()");
addOnEvent("Context_Group", "prefetch", "updateContextGroupToFeature()");
addOnEvent("Context_Group",    "fetch", "updateContextGroupFields()");
/****************************** DYNAMIC UI - FCN ******************************/
void updateFcnVolume() {
  String ref       = "FCN/General/FCN_Class";
  String vocabName = getMenuValue(ref);

  if (vocabName.equals("{Sediment}")) { showFcnVolume(); return; }
  if (vocabName.equals("{Other}"   )) { showFcnVolume(); return; }

  hideFcnVolume();
}

void hideFcnVolume() {
  hideView("FCN/General/Volume_Liters");
}

void showFcnVolume() {
  String refView  = "FCN/General/Volume_Liters";
  String refGroup = "FCN/General/Volume_Liters_Group";

  if (hasView(refView)) return;

  String label      = guessArch16nVal (refView);
  String attribName = getAttributeName(refView);

  // Create view
  FormInputDef viewDef = createViewDef();
  viewDef.createTextField     ("decimal");
  viewDef.setLabel            (label);
  viewDef.setAttributeName    (attribName);
  viewDef.setAttributeType    ("measure");
  viewDef.setAnnotationEnabled(true);
  viewDef.setCertaintyEnabled (true);
  viewDef.setInfoEnabled      (true);

  createView(refView, viewDef, refGroup);
}

addOnEvent("FCN/General/FCN_Class", "click", "updateFcnVolume()");
addOnEvent("FCN",                "prefetch", "showFcnVolume()");
addOnEvent("FCN",                   "fetch", "updateFcnVolume()");
/******************************* CONTEXT DATES ********************************/
addOnEvent("Context/General/Add_Date_Closed", "click", "setContextDateClosed()");
addOnEvent("Context", "create", "setContextDateOpened()");

void setTimestamp(String path) {
  setFieldValue(
      path,
      new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date())
  );
}

void setContextDateOpened() {
  String ref = "Context/General/Date_Opened";
  setTimestamp(ref);
}

void setContextDateClosed() {
  String ref = "Context/General/Date_Closed";
  setTimestamp(ref);
}
/******************************* TEXTURE HELPER *******************************/
onEvent("Context/Soil_Texture_Helper/Update_Soil_Texture", "click", "setTextureActual()");

// Overrides the original function definition using @POSTPROC.
void onClickContextSoilTextureHelper () {
  showTab("Context/Soil_Texture_Helper");
}

void setTextureActual(){
    String soilQuery= "SELECT vocabid " +
                      "  FROM vocabulary JOIN attributekey USING (attributeid) "+
                      " WHERE attributeName = 'Soil Texture' "+
                      "   AND vocabname = '" + getMenuValue("Context/Soil_Texture_Helper/Soil_Texture_Helper") + "' ";
    //This function makes the hierarchical soil texture selector write to the texture dropdown. We should discuss.
    Log.d("foo1", soilQuery);

    fetchOne(soilQuery, new FetchCallback() {
        onFetch(textureToSet) {
            if(!isNull(textureToSet)){
                Log.d("foo1", textureToSet.get(0));
                setFieldValue("Context/Deposit/Soil_Texture", textureToSet.get(0));
            } else {
                showToast("Match not found. You shouldn't see this, but select the result manually.");
            }
            cancelTab("Context/Soil_Texture_Helper", false);
            showTab("Context/Deposit");
        }
    });
}
/****************************** SEARCH EXTENSION ******************************/
/* Implements an extension to the search page which allows users to           */
/* constrain their searches by user.                                          */
/******************************************************************************/
delOnEvent("Control/Search", "show", "search()");
addOnEvent("Control/Search", "show", "populateSelectUser()");
addOnEvent("Control/Search", "show", "populateSite()");

void populateSelectUser(){
  String refSearchUsers = "Control/Search/Select_User";
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null "+
                                   " UNION " +
                                   "SELECT -1, '{All_Users}'";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(refSearchUsers, result, false);
      search();
    }
  });
}

void populateSite() {
  String refSite = "Control/Search/Select_Site";

  String q = "";
  q += " SELECT uuid, response, attributename, measure";
  q += "   FROM latestNonDeletedAentvalue";
  q += "   JOIN latestNonDeletedArchEntFormattedIdentifiers USING (uuid)";
  q += "   JOIN attributekey USING (attributeid)";
  q += "  WHERE attributename LIKE '% Site Name'";
  q += "     OR attributename LIKE '% Year of Campaign'";

  FetchCallback popSite = new FetchCallback() {
    onFetch(result) {
      List normalised = normaliseSiteResult(result);
      populateDropDown(refSite, normalised, true);
    }
  };

  fetchAll(q, popSite);
}

List normaliseSiteResult(List result) {
  Map  normalisedResultMap  = new HashMap();
  List normalisedResultList = new ArrayList();

  for (List row : result) {
    String uuid     = row.get(0);
    String response = row.get(1);
    String attrName = row.get(2);
    String attrVal  = row.get(3);

    List mapRow = normalisedResultMap.get(uuid);
    mapRow = updateMapRow(mapRow, "Response", response);
    mapRow = updateMapRow(mapRow, attrName,   attrVal);

    normalisedResultMap.put(uuid, mapRow);
  }

  for (List val : normalisedResultMap.values()) {
    String response = val.get(0);
    String siteName = val.get(1);
    String siteYear = val.get(2);

    List normalisedRow = new ArrayList();
    normalisedRow.add(siteName + SEP + siteYear);
    normalisedRow.add(response);

    normalisedResultList.add(normalisedRow);
  }

  return normalisedResultList;
}

List updateMapRow(List row, String key, String val) {
  String RESPONSE         = "Response";
  String SITE_NAME        = "Site Name";
  String YEAR_OF_CAMPAIGN = "Year of Campaign";

  if (row == null) {
    row = new ArrayList();
    row.add("");
    row.add("");
    row.add("");
  }

  if (key == null)
    return row;
  else if (key.contains(RESPONSE        )) row.set(0, val);
  else if (key.contains(SITE_NAME       )) row.set(1, val);
  else if (key.contains(YEAR_OF_CAMPAIGN)) row.set(2, val);

  return row;
}

// Overrides auto-generated definition
void search(){
  String tabgroup = "Control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";
  String refSelectUser  = tabgroup + "/Search/Select_User";
  String refSelectSite  = tabgroup + "/Search/Select_Site";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String user = getFieldValue(refSelectUser);
  String name = getSearchSiteName(refSelectSite);
  String year = getSearchSiteYear(refSelectSite);
  if (isNull(user)) return;
  String searchQuery = "SELECT uuid, response " +
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  " +
                       " WHERE uuid in (SELECT uuid " +
                       "                  FROM latestNonDeletedArchEntIdentifiers " +
                       "                 WHERE measure LIKE '{term}%'  " +
                       "                   AND ( aenttypename LIKE '{type}' OR '' = '{type}' ) " +
                       "                   AND ( userid = {user} OR -1 = {user}) " +
                       "                ) " +
                       "  AND  ( " +
                       "           ('{name}' = '\\0' AND '{year}' = '\\0') OR" +
                       "           uuid IN (" +
                       "            SELECT uuid" +
                       "              FROM latestnondeletedaentvalue" +
                       "              JOIN attributekey USING (attributeid)" +
                       "             WHERE attributename LIKE '% Site Name'" +
                       "               AND measure = '{name}'" +
                       "               AND uuid IN (" +
                       "                    SELECT uuid" +
                       "                      FROM latestnondeletedaentvalue" +
                       "                      JOIN attributekey USING (attributeid)" +
                       "                     WHERE attributename LIKE '% Year of Campaign'" +
                       "                       AND measure = '{year}'" +
                       "               )" +
                       "           )" +
                       "       )" +
                       " ORDER BY response " +
                       " LIMIT ? " +
                       "OFFSET ? ";
  searchQuery = replaceFirst(searchQuery, "{term}", term);
  searchQuery = replaceFirst(searchQuery, "{type}", type);
  searchQuery = replaceFirst(searchQuery, "{type}", type);
  searchQuery = replaceFirst(searchQuery, "{user}", user);
  searchQuery = replaceFirst(searchQuery, "{user}", user);
  searchQuery = replaceFirst(searchQuery, "{name}", name);
  searchQuery = replaceFirst(searchQuery, "{year}", year);
  searchQuery = replaceFirst(searchQuery, "{name}", name);
  searchQuery = replaceFirst(searchQuery, "{year}", year);

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}

String getSearchSiteName(String ref) {
  return getSearchSiteField(ref, 0);
}

String getSearchSiteYear(String ref) {
  return getSearchSiteField(ref, 1);
}

String getSearchSiteField(String ref, int index) {
  String nameYear = getFieldValue(ref);

  if (isNull(nameYear))
    return "\\0";
  else
    return nameYear.split(SEP)[index];
}
/***************************** CUSTOM VALIDATION ******************************/

String getName(String ref, String defaultName) {
  String refOri = "Context/Cut/Orientation_Degree";

  if (ref.equals(refOri))
    return defaultName + " {Must_be_between_0_0_and_90_0}";

  return defaultName;
}

String getCond(String ref, String defaultCond) {
  String refTab  = getTabRef(ref);

  if (refTab.equals("Context/Cut"      ))
    return "isSelected(\"Context/General/Context_Type\", \"{Cut}\")";
  if (refTab.equals("Context/Deposit"  ))
    return "isSelected(\"Context/General/Context_Type\", \"{Deposit}\")" +
      " ||  isSelected(\"Context/General/Context_Type\", \"{Natural}\")";
  if (refTab.equals("Context/Skeleton" ))
    return "isSelected(\"Context/General/Context_Type\", \"{Skeleton}\")";
  if (refTab.equals("Context/Structure"))
    return "isSelected(\"Context/General/Context_Type\", \"{Construction}\")";

  return defaultCond;
}

// Overrides autogenerated definition
boolean isValidField(String ref) {
  String refOri = "Context/Cut/Orientation_Degree";
  if (!ref.equals(refOri))
    return !isNull(getFieldValue(ref)); // Do blank check

  // Do range check
  String val = getFieldValue(refOri);
  double dblVal;
  try {
    dblVal = Double.parseDouble(val);
  } catch(NumberFormatException e) {
    dblVal = -1.0;
  }

  double fltMin =  0.0;
  double fltMax = 90.0;

  return dblVal >= fltMin &&
         dblVal <= fltMax;
}

// Overrides autogenerated definition
List fieldPair(String ref, String name, String cond) {
  String refOri = "Context/Cut/Orientation_Degree";

  name = getName(ref, name);
  cond = getCond(ref, cond);

  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);

  return fp;
}
/******************************** DATE CLOSED *********************************/
addOnEvent("Date_Closed/Date_Closed/Set_Date_Closed", "click", "setDateClosed()");
addOnEvent("Date_Closed/Date_Closed/Cancel",          "click", "goBack()");

// Overrides autogenerated function
void onClickTrenchTrenchSetDateClosed() {
  String head;
  String body;
  String cbOkay;
  String cbCancel;

  head  = "Proceed To Date Picker?";
  body  = "Have you established the closing date? If not, press 'Cancel' and ";
  body += "return. If yes, press 'OK' and select date from date picker. Once ";
  body += "selected, 'Date Closed' can only be edited but not blanked.";

  cbOkay   = "goToDateClosedTabGroup()";
  cbCancel = "";

  showAlert(head, body, cbOkay, cbCancel);
}

void goToDateClosedTabGroup() {
  newTab("Date_Closed", true);
}

void setDateClosed() {
  String src = "Date_Closed/Date_Closed/Date_Closed";
  String dst = "Trench/Trench/Date_Closed";

  // Change the date picker's DD/MM/YYYY format to YYYY/MM/DD
  String val;
  val = getFieldValue(src);
  val = val.split("/")[2] + "/" +
        val.split("/")[1] + "/" +
        val.split("/")[0];

  setFieldValue(dst, val);
  goBack();
}
/*************************** CREATE NEW SITE BUTTON ***************************/

// Overrrides autogenerated definition
void onClickControlContextsCreateNewSite() {
  parentTabgroup__ = "Control";

  tryCreateNewSite();
}

void tryCreateNewSite() {
  String siteName = getFieldValue("Control/Contexts/New_Site_Name");
  String siteYear = getFieldValue("Control/Contexts/Year_of_Campaign");

  String q = "";
  q += " SELECT response";
  q += "   FROM latestNonDeletedArchEntFormattedIdentifiers";
  q += "  WHERE uuid IN (";
  q += "         SELECT uuid";
  q += "           FROM latestnondeletedaentvalue";
  q += "           JOIN attributekey USING (attributeid)";
  q += "          WHERE attributename = 'Site Site Name'";
  q += "            AND measure = '{Site_Site_Name}'";
  q += "            AND uuid IN (";
  q += "                 SELECT uuid";
  q += "                   FROM latestnondeletedaentvalue";
  q += "                   JOIN attributekey USING (attributeid)";
  q += "                  WHERE attributename = 'Site Year of Campaign'";
  q += "                    AND measure = '{Site_Year_of_Campaign}'))";
  q += "    AND aenttypename = 'Site'";
  q  = replaceFirst(q, "{Site_Site_Name}",        siteName);
  q  = replaceFirst(q, "{Site_Year_of_Campaign}", siteYear);

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      if      (result        == null) newSite();
      else if (result.size() == 0   ) newSite();
      else                            confirmNewSite();
    }
  };

  fetchAll(q, callback);
}

void confirmNewSite() {
  String head;
  String body;
  String cbOk;
  String cbBad;

  head  = "Site Already Exists";
  body  = "A site having this name and campaign year already exists. Tap 'OK' ";
  body += " to change the 'New Site Name' and 'Year of Campaign' fields, or ";
  body += " 'Cancel' to dismiss this message and create a new Site anyway.";

  cbOk  = "";
  cbBad = "newSite()";

  showAlert(head, body, cbOk, cbBad);
}
/************************** CREATE NEW TRENCH BUTTON **************************/

// Overrrides autogenerated definition
void onClickSiteSiteTrenches() {
  String tabgroup = "Site";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  tryCreateNewTrench();
}

void tryCreateNewTrench () {
  String parentUuid = getUuid(getDisplayedTabGroup());
  String trenchId   = getFieldValue("Site/Site/Trench_ID");

  String q = "" +
    "SELECT childuuid, response "+
    "  FROM parentchild "+
    "  JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid) " +
    "  JOIN createdmodifiedatby USING (uuid) " +
    " WHERE relationshipid IN (SELECT relationshipid  " +
    "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid) " +
    "                           WHERE relntypename = 'Site - Trench') " +
    "   AND parentuuid = '" + parentUuid + "' " +
    "   AND (childaenttypename = 'Trench') " +
    "   AND childuuid IN (" +
    "           SELECT uuid" +
    "             FROM latestnondeletedaentvalue"+
    "             JOIN attributekey USING (attributeid)"+
    "            WHERE attributename = 'Trench AreaCode'"+
    "              AND measure = '" + trenchId + "')";

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      if      (result        == null) newTrench();
      else if (result.size() == 0   ) newTrench();
      else                            confirmNewTrench();
    }
  };

  fetchAll(q, callback);
}

void confirmNewTrench() {
  String head;
  String body;
  String cbOk;
  String cbBad;

  head  = "Trench Already Exists";
  body  = "A trench having this trench ID already exists. Tap 'OK' to change ";
  body += " the 'Trench ID' field, or 'Cancel' to dismiss this  message and ";
  boyd += " create a new Trench anyway.";

  cbOk  = "";
  cbBad = "newTrench()";

  showAlert(head, body, cbOk, cbBad);
}


/******************************************************************************/
/*                                    INIT                                    */
/*                                                                            */
/* Stuff which needs to be done last.                                         */
/******************************************************************************/
bindOnEvents();
